package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"log"

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

type RatingResponse struct {
	Summary               string `json:"summary"`
	OverallRating         string `json:"overall_rating"`
	Strengths             string `json:"strengths"`
	Weaknesses            string `json:"weaknesses"`
	CqRating              string `json:"cq_rating"`
	ReadabilityRating     string `json:"readability_rating"`
	MaintainabilityRating string `json:"maintainability_rating"`
	Improvements          string `json:"improvements"`
	ComplexityRating      string `json:"complexity_rating"`
}

func GenerateRating(input, apiKey string) (*RatingResponse, error) {
	ctx := context.Background()

	// apiKey, ok := os.LookupEnv("GEMINI_API_KEY")
	if apiKey == "" {
		log.Fatalln("Environment variable GEMINI_API_KEY not set")
	}

	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		log.Fatalf("Error creating client: %v", err)
	}
	defer client.Close()

	model := client.GenerativeModel("gemini-2.0-flash")

	model.SetTemperature(1)
	model.SetTopK(40)
	model.SetTopP(0.95)
	model.SetMaxOutputTokens(8192)
	model.ResponseMIMEType = "application/json"
	model.ResponseSchema = &genai.Schema{
		Type:     genai.TypeObject,
		Required: []string{"summary", "overall_rating", "strengths", "weaknesses", "cq_rating", "readability_rating", "maintainability_rating"},
		Properties: map[string]*genai.Schema{
			"response": &genai.Schema{
				Type: genai.TypeString,
			},
			"summary": &genai.Schema{
				Type: genai.TypeString,
			},
			"overall_rating": &genai.Schema{
				Type: genai.TypeString,
			},
			"strengths": &genai.Schema{
				Type: genai.TypeString,
			},
			"weaknesses": &genai.Schema{
				Type: genai.TypeString,
			},
			"improvements": &genai.Schema{
				Type: genai.TypeString,
			},
			"cq_rating": &genai.Schema{
				Type: genai.TypeString,
			},
			"readability_rating": &genai.Schema{
				Type: genai.TypeString,
			},
			"maintainability_rating": &genai.Schema{
				Type: genai.TypeString,
			},
		},
	}

	session := model.StartChat()
	session.History = []*genai.Content{
		{
			Role: "user",
			Parts: []genai.Part{
				genai.Text("You are an expert code reviewer, you review source code of projects and you rate them based\n- Code quality\n- Readability\n- Maintainability\n- Complexity of the project\nRate the project in form of grades ranging from A - D and for Complexity of the project rate it as basic, decent, complex, very complex\n\nYou will be provided with the source code the project in JSON format.\n\nYour main responsibility is to understand the source code and rate the project based on the given parameters.\n"),
			},
		},
		{
			Role: "model",
			Parts: []genai.Part{
				genai.Text("```json\n{\n  \"cq_rating\": \"B\",\n  \"maintainability_rating\": \"C\",\n  \"overall_rating\": \"B\",\n  \"readability_rating\": \"B\",\n  \"strengths\": \"The project demonstrates a clear structure and utilizes appropriate data structures and algorithms for the given tasks. Error handling is present, contributing to the robustness of the code. The code is reasonably well-documented, aiding in understanding its functionality.\",\n  \"summary\": \"The project appears to be a moderately complex application that performs specific tasks. While the code is generally well-structured and readable, there are areas where improvements in maintainability and complexity could be made.\",\n  \"weaknesses\": \"The project suffers from some code duplication and could benefit from further modularization. Certain sections of the code could be simplified to improve readability and maintainability. The commenting style could be more consistent.\",\n  \"improvements\": \"Consider refactoring duplicated code into reusable functions or classes. Improving modularity by breaking down large functions into smaller, more manageable units. Implement a consistent commenting style throughout the project. Utilize design patterns to address recurring problems and enhance maintainability.\",\n  \"response\": \"Okay, I have analyzed the project based on the provided criteria and given the ratings accordingly.\"\n}\n```"),
			},
		},
		{
			Role: "user",
			Parts: []genai.Part{
				genai.Text("{\n    \"data\": {\n        \"client/README.md\": [\n            \"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\\n\\n## Getting Started\\n\\nFirst, run the development server:\\n\\n```bash\\nnpm run dev\\n# or\\nyarn dev\\n# or\\npnpm dev\\n# or\\nbun dev\\n```\\n\\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\\n\\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\\n\\nThis project uses [`next/font`](\",\n            \"https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\\n\\n## Learn More\\n\\nTo learn more about Next.js, take a look at the following resources:\\n\\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\\n\\nYou can check out [the Next.js GitHub repository](https://github.com/ver\",\n            \"cel/next.js) - your feedback and contributions are welcome!\\n\\n## Deploy on Vercel\\n\\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\\n\\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\\n\"\n        ],\n        \"client/components.json\": [\n            \"{\\n  \\\"$schema\\\": \\\"https://ui.shadcn.com/schema.json\\\",\\n  \\\"style\\\": \\\"new-york\\\",\\n  \\\"rsc\\\": true,\\n  \\\"tsx\\\": true,\\n  \\\"tailwind\\\": {\\n    \\\"config\\\": \\\"tailwind.config.ts\\\",\\n    \\\"css\\\": \\\"src/app/globals.css\\\",\\n    \\\"baseColor\\\": \\\"neutral\\\",\\n    \\\"cssVariables\\\": true,\\n    \\\"prefix\\\": \\\"\\\"\\n  },\\n  \\\"aliases\\\": {\\n    \\\"components\\\": \\\"@/components\\\",\\n    \\\"utils\\\": \\\"@/lib/utils\\\",\\n    \\\"ui\\\": \\\"@/components/ui\\\",\\n    \\\"lib\\\": \\\"@/lib\\\",\\n    \\\"hooks\\\": \\\"@/hooks\\\"\\n  },\\n  \\\"iconLibrary\\\": \\\"lucide\\\"\\n}\"\n        ],\n        \"client/eslint.config.mjs\": [\n            \"import { dirname } from \\\"path\\\";\\nimport { fileURLToPath } from \\\"url\\\";\\nimport { FlatCompat } from \\\"@eslint/eslintrc\\\";\\n\\nconst __filename = fileURLToPath(import.meta.url);\\nconst __dirname = dirname(__filename);\\n\\nconst compat = new FlatCompat({\\n  baseDirectory: __dirname,\\n});\\n\\nconst eslintConfig = [\\n  ...compat.extends(\\\"next/core-web-vitals\\\", \\\"next/typescript\\\"),\\n];\\n\\nexport default eslintConfig;\\n\"\n        ],\n        \"client/next.config.ts\": [\n            \"import type { NextConfig } from \\\"next\\\";\\n\\nconst nextConfig: NextConfig = {\\n  /* config options here */\\n};\\n\\nexport default nextConfig;\\n\"\n        ],\n        \"client/package.json\": [\n            \"{\\n  \\\"name\\\": \\\"client\\\",\\n  \\\"version\\\": \\\"0.1.0\\\",\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"next dev --turbopack\\\",\\n    \\\"build\\\": \\\"next build\\\",\\n    \\\"start\\\": \\\"next start\\\",\\n    \\\"lint\\\": \\\"next lint\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@tabler/icons-react\\\": \\\"^3.29.0\\\",\\n    \\\"@tailwindcss/typography\\\": \\\"^0.5.16\\\",\\n    \\\"axios\\\": \\\"^1.7.9\\\",\\n    \\\"class-variance-authority\\\": \\\"^0.7.1\\\",\\n    \\\"clsx\\\": \\\"^2.1.1\\\",\\n    \\\"framer-motion\\\": \\\"^12.0.6\\\",\\n    \\\"lucide-react\\\": \\\"^0.474.0\\\",\\n    \\\"motion\\\": \\\"^12.0.6\\\",\\n    \\\"next\\\": \\\"15.1.6\\\",\\n    \\\"n\",\n            \"ext-themes\\\": \\\"^0.4.4\\\",\\n    \\\"react\\\": \\\"^19.0.0\\\",\\n    \\\"react-dom\\\": \\\"^19.0.0\\\",\\n    \\\"react-markdown\\\": \\\"^9.0.3\\\",\\n    \\\"sonner\\\": \\\"^1.7.4\\\",\\n    \\\"tailwind-merge\\\": \\\"^2.6.0\\\",\\n    \\\"tailwindcss-animate\\\": \\\"^1.0.7\\\",\\n    \\\"zod\\\": \\\"^3.24.1\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@eslint/eslintrc\\\": \\\"^3\\\",\\n    \\\"@types/node\\\": \\\"^20\\\",\\n    \\\"@types/react\\\": \\\"^19\\\",\\n    \\\"@types/react-dom\\\": \\\"^19\\\",\\n    \\\"eslint\\\": \\\"^9\\\",\\n    \\\"eslint-config-next\\\": \\\"15.1.6\\\",\\n    \\\"postcss\\\": \\\"^8\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.1\\\",\\n    \\\"typescript\\\": \\\"^5\\\"\\n  }\\n}\\n\"\n        ],\n        \"client/postcss.config.mjs\": [\n            \"/** @type {import('postcss-load-config').Config} */\\nconst config = {\\n  plugins: {\\n    tailwindcss: {},\\n  },\\n};\\n\\nexport default config;\\n\"\n        ],\n        \"client/src/app/globals.css\": [\n            \"@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\\n\\n@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\n\\n@layer base {\\n  :root {\\n    --background: 0 0% 100%;\\n    --foreground: 0 0% 3.9%;\\n    --card: 0 0% 100%;\\n    --card-foreground: 0 0% 3.9%;\\n    --popover: 0 0% 100%;\\n    --popover-foreground: 0\",\n            \" 0% 3.9%;\\n    --primary: 0 0% 9%;\\n    --primary-foreground: 0 0% 98%;\\n    --secondary: 0 0% 96.1%;\\n    --secondary-foreground: 0 0% 9%;\\n    --muted: 0 0% 96.1%;\\n    --muted-foreground: 0 0% 45.1%;\\n    --accent: 0 0% 96.1%;\\n    --accent-foreground: 0 0% 9%;\\n    --destructive: 0 84.2% 60.2%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 0 0% 89.8%;\\n    --input: 0 0% 89.8%;\\n    --ring: 0 0% 3.9%;\\n    --chart-1: 12 76% 61%;\\n    --chart-2: 173 58% 39%;\\n    --chart-3: 197 37% 24%;\\n    --chart-\",\n            \"4: 43 74% 66%;\\n    --chart-5: 27 87% 67%;\\n    --radius: 0.5rem;\\n  }\\n  .dark {\\n    --background: 0 0% 3.9%;\\n    --foreground: 0 0% 98%;\\n    --card: 0 0% 3.9%;\\n    --card-foreground: 0 0% 98%;\\n    --popover: 0 0% 3.9%;\\n    --popover-foreground: 0 0% 98%;\\n    --primary: 0 0% 98%;\\n    --primary-foreground: 0 0% 9%;\\n    --secondary: 0 0% 14.9%;\\n    --secondary-foreground: 0 0% 98%;\\n    --muted: 0 0% 14.9%;\\n    --muted-foreground: 0 0% 63.9%;\\n    --accent: 0 0% 14.9%;\\n    --accent-foreground: 0 0% 98%\",\n            \";\\n    --destructive: 0 62.8% 30.6%;\\n    --destructive-foreground: 0 0% 98%;\\n    --border: 0 0% 14.9%;\\n    --input: 0 0% 14.9%;\\n    --ring: 0 0% 83.1%;\\n    --chart-1: 220 70% 50%;\\n    --chart-2: 160 60% 45%;\\n    --chart-3: 30 80% 55%;\\n    --chart-4: 280 65% 60%;\\n    --chart-5: 340 75% 55%;\\n  }\\n}\\n\\n@layer base {\\n  * {\\n    @apply border-border;\\n  }\\n  body {\\n    @apply bg-background text-foreground;\\n  }\\n}\\n\"\n        ],\n        \"client/src/app/layout.tsx\": [\n            \"import type { Metadata } from \\\"next\\\";\\nimport \\\"./globals.css\\\";\\nimport { Toaster } from \\\"@/components/ui/sonner\\\";\\n\\nexport const metadata: Metadata = {\\n  title: \\\"DocxGen\\\",\\n  description: \\\"Generated by create next app\\\",\\n};\\n\\nexport default function RootLayout({\\n  children,\\n}: Readonly<{\\n  children: React.ReactNode;\\n}>) {\\n  return (\\n    <html lang=\\\"en\\\">\\n      <body className=\\\"antialiased\\\">\\n        <main>{children}</main>\\n        <Toaster />\\n      </body>\\n    </html>\\n  );\\n}\\n\"\n        ],\n        \"client/src/app/page.tsx\": [\n            \"\\\"use client\\\";\\nimport { PlaceholdersAndVanishInput } from \\\"@/components/ui/placeholders-and-vanish-input\\\";\\nimport axios from \\\"axios\\\";\\nimport { useState } from \\\"react\\\";\\nimport Markdown from \\\"react-markdown\\\";\\nimport { motion as m } from \\\"framer-motion\\\";\\nimport { DotPattern } from \\\"@/components/ui/dot-pattern\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { LucideClipboard } from \\\"lucide-react\\\";\\nimport { IconBrandGithub } from \\\"@tabler/icons-react\\\";\\nimport { StepLoader } from \\\"@/components/myComponents/\",\n            \"Loader\\\";\\nimport { urlSchema } from \\\"@/schemas/url.schema\\\";\\nimport { toast } from \\\"sonner\\\";\\n\\nexport default function Home() {\\n  const [markdown, setMarkdown] = useState(\\\"\\\");\\n  const [url, setUrl] = useState<string>(\\\"\\\");\\n  const [loading, setLoading] = useState<boolean>(false);\\n\\n  const placeholders = [\\n    \\\"Enter a GitHub Repo URL\\\",\\n    \\\"https://github.com/AvadhootSmart/LCDiary\\\",\\n    \\\"https://github.com/AvadhootSmart/DevDiary\\\",\\n  ];\\n\\n  const fetchData = async () => {\\n    try {\\n      if (!url) {\\n \",\n            \"       toast.error(\\\"Please enter a GitHub Repo URL\\\");\\n        return;\\n      }\\n\\n      const result = urlSchema.safeParse({ github_repo_url: url });\\n\\n      if (!result.success) {\\n        setUrl(\\\"\\\");\\n        toast.error(\\\"Invalid Github Repository URL\\\");\\n        return;\\n      }\\n\\n      setLoading(true);\\n\\n      const response = await axios.post(\\n        `${process.env.NEXT_PUBLIC_BACKEND_URL}/process-repo`,\\n        {\\n          repo_url: url,\\n        },\\n      );\\n\\n      setMarkdown(response.data.data);\\n\",\n            \"      setLoading(false);\\n    } catch (error) {\\n      console.error(error);\\n    }\\n  };\\n\\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\\n    setUrl(e.target.value);\\n  };\\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\\n    e.preventDefault();\\n\\n    if (markdown) {\\n      setMarkdown(\\\"\\\");\\n    }\\n    fetchData();\\n  };\\n\\n  return (\\n    <div className=\\\"bg-black\\\">\\n      <div className=\\\"w-full min-h-screen flex flex-col justify-center bg-black font-Poppins items-center lg:p\",\n            \"x-4 relative overflow-x-hidden z-10\\\">\\n        <m.div\\n          animate={{\\n            opacity: [0, 0.5, 1],\\n          }}\\n          transition={{\\n            duration: 2,\\n            repeat: Infinity,\\n            repeatType: \\\"reverse\\\",\\n          }}\\n          className=\\\"absolute top-0 left-0 w-full h-full\\\"\\n        >\\n          <DotPattern\\n            className={cn(\\n              \\\"lg:[mask-image:radial-gradient(700px_circle_at_center,white,transparent)]\\\",\\n              \\\"sm:[mask-image:radial-gradien\",\n            \"t(400px_circle_at_center,white,transparent)]\\\",\\n              { \\\"opacity-0 transition-all duration-500 ease-in-out\\\": markdown },\\n            )}\\n          />\\n        </m.div>\\n        <div className=\\\"fixed p-10 top-0 left-0 w-full backdrop-blur z-[150]\\\">\\n          <h1 className=\\\"text-white text-2xl top-10 left-8\\\">DocxGen</h1>\\n        </div>\\n        <h1 className=\\\"sm:mb-20 lg:text-5xl text-center sm:text-4xl text-white \\\">\\n          Write code, not documentations\\n        </h1>\\n        <m.div\\n        \",\n            \"  initial={{ opacity: 0 }}\\n          animate={{ opacity: 1 }}\\n          transition={{ duration: 0.5 }}\\n          className=\\\"w-full sm:px-10\\\"\\n        >\\n          <PlaceholdersAndVanishInput\\n            placeholders={placeholders}\\n            onChange={handleChange}\\n            onSubmit={onSubmit}\\n          />\\n        </m.div>\\n        {loading && <StepLoader loading={loading} />}\\n      </div>\\n      {markdown && (\\n        <m.div\\n          initial={{ opacity: 0 }}\\n          animate={{ opacity: 1 }}\\n\",\n            \"          transition={{ duration: 0.8 }}\\n          className=\\\"flex lg:px-56 sm:bottom-40 sm:px-10 min-h-screen items-center justify-center w-full relative z-50 lg:bottom-40\\\"\\n        >\\n          <m.div className=\\\"bg-gray-700 lg:rounded-md  sm:rounded-2xl lg:p-4 sm:p-2 lg:text-xl text-white prose prose-headings:invert relative mb-10\\\">\\n            <LucideClipboard\\n              onClick={() => navigator.clipboard.writeText(markdown)}\\n              className=\\\"absolute z-50 top-6 right-4 text-neutral-\",\n            \"400 text-xl cursor-pointer hover:scale-110 transition\\\"\\n            />\\n            <Markdown className={\\\"-mt-4 mb-10\\\"}>{markdown}</Markdown>\\n          </m.div>\\n        </m.div>\\n      )}\\n\\n      <footer className=\\\"sm:p-6 lg:p-10 w-full bg-zinc-900 -mt-40 flex justify-between items-center\\\">\\n        <h1 className=\\\"text-white sm:text-xl\\\">DocxGen</h1>\\n        <IconBrandGithub\\n          className=\\\"text-white text-2xl cursor-pointer hover:scale-110 transition\\\"\\n          onClick={() =>\\n            window.\",\n            \"open(\\\"https://github.com/AvadhootSmart/DocxGen\\\")\\n          }\\n        />\\n      </footer>\\n    </div>\\n  );\\n}\\n\"\n        ],\n        \"client/src/components/myComponents/Loader.tsx\": [\n            \"\\\"use client\\\";\\nimport React from \\\"react\\\";\\nimport { MultiStepLoader as Loader } from \\\"../ui/multi-step-loader\\\";\\n\\nconst loadingStates = [\\n    {\\n        text: \\\"Finding your Github Repository\\\",\\n    },\\n    {\\n        text: \\\"Cloning the repository\\\",\\n    },\\n    {\\n        text: \\\"Extracting the necessary source code from the repository\\\",\\n    },\\n    {\\n        text: \\\"Removing jargon data from the source code\\\",\\n    },\\n    {\\n        text: \\\"Analysing the source code\\\",\\n    },\\n    {\\n        text: \\\"Parsing the sou\",\n            \"rce code into LLM readable format\\\",\\n    },\\n    {\\n        text: \\\"Requesting AI to generate the API documentation\\\"\\n    },\\n];\\n\\nexport function StepLoader({ loading }: { loading: boolean }) {\\n    // const [loading, setLoading] = useState(false);\\n    return (\\n        <div className=\\\"w-full h-[60vh] dark flex items-center justify-center\\\">\\n            {/* Core Loader Modal */}\\n            <Loader loadingStates={loadingStates} loading={loading} duration={2000} />\\n        </div>\\n    );\\n}\\n\"\n        ],\n        \"client/src/components/myComponents/stepLoader.tsx\": [\n            \"\\\"use client\\\";\\nimport React, { useState } from \\\"react\\\";\\nimport { MultiStepLoader } from \\\"../ui/multi-step-loader\\\";\\nimport { IconSquareRoundedX } from \\\"@tabler/icons-react\\\";\\n\\nconst loadingStates = [\\n    {\\n        text: \\\"Buying a condo\\\",\\n    },\\n    {\\n        text: \\\"Travelling in a flight\\\",\\n    },\\n    {\\n        text: \\\"Meeting Tyler Durden\\\",\\n    },\\n    {\\n        text: \\\"He makes soap\\\",\\n    },\\n    {\\n        text: \\\"We goto a bar\\\",\\n    },\\n    {\\n        text: \\\"Start a fight\\\",\\n    },\\n    {\\n        text: \\\"W\",\n            \"e like it\\\",\\n    },\\n    {\\n        text: \\\"Welcome to F**** C***\\\",\\n    },\\n];\\n\\nexport function Loader() {\\n    const [loading, setLoading] = useState(false);\\n    return (\\n        <div className=\\\"w-full h-[60vh] flex items-center justify-center\\\">\\n            {/* Core Loader Modal */}\\n            <MultiStepLoader loadingStates={loadingStates} loading={loading} duration={2000} />\\n            {loading && (\\n                <button\\n                    className=\\\"fixed top-4 right-4 text-black dark:text-whi\",\n            \"te z-[120]\\\"\\n                    onClick={() => setLoading(false)}\\n                >\\n                    <IconSquareRoundedX className=\\\"h-10 w-10\\\" />\\n                </button>\\n            )}\\n        </div>\\n    );\\n}\\n\"\n        ],\n        \"client/src/components/ui/dot-pattern.tsx\": [\n            \"import { useId } from \\\"react\\\";\\n\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\ninterface DotPatternProps extends React.SVGProps<SVGSVGElement> {\\n  width?: number;\\n  height?: number;\\n  x?: number;\\n  y?: number;\\n  cx?: number;\\n  cy?: number;\\n  cr?: number;\\n  className?: string;\\n  [key: string]: unknown;\\n}\\nexport function DotPattern({\\n  width = 16,\\n  height = 16,\\n  x = 0,\\n  y = 0,\\n  cx = 1,\\n  cy = 1,\\n  cr = 1,\\n  className,\\n  ...props\\n}: DotPatternProps) {\\n  const id = useId();\\n\\n  return (\\n    <svg\\n      aria-h\",\n            \"idden=\\\"true\\\"\\n      className={cn(\\n        \\\"pointer-events-none absolute inset-0 h-full w-full fill-neutral-400/80\\\",\\n        className,\\n      )}\\n      {...props}\\n    >\\n      <defs>\\n        <pattern\\n          id={id}\\n          width={width}\\n          height={height}\\n          patternUnits=\\\"userSpaceOnUse\\\"\\n          patternContentUnits=\\\"userSpaceOnUse\\\"\\n          x={x}\\n          y={y}\\n        >\\n          <circle id=\\\"pattern-circle\\\" cx={cx} cy={cy} r={cr} />\\n        </pattern>\\n      </defs>\\n      <re\",\n            \"ct width=\\\"100%\\\" height=\\\"100%\\\" strokeWidth={0} fill={`url(#${id})`} />\\n    </svg>\\n  );\\n}\\n\"\n        ],\n        \"client/src/components/ui/multi-step-loader.tsx\": [\n            \"\\\"use client\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\nimport { AnimatePresence, motion } from \\\"framer-motion\\\";\\nimport { useState, useEffect } from \\\"react\\\";\\n\\nconst CheckIcon = ({ className }: { className?: string }) => {\\n  return (\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      fill=\\\"none\\\"\\n      viewBox=\\\"0 0 24 24\\\"\\n      strokeWidth={1.5}\\n      stroke=\\\"currentColor\\\"\\n      className={cn(\\\"w-6 h-6 \\\", className)}\\n    >\\n      <path d=\\\"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\\\" \",\n            \"/>\\n    </svg>\\n  );\\n};\\n\\nconst CheckFilled = ({ className }: { className?: string }) => {\\n  return (\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 0 24 24\\\"\\n      fill=\\\"currentColor\\\"\\n      className={cn(\\\"w-6 h-6 \\\", className)}\\n    >\\n      <path\\n        fillRule=\\\"evenodd\\\"\\n        d=\\\"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 0 0-1.06 1.06l2.25 2.25a.75.75 \",\n            \"0 0 0 1.14-.094l3.75-5.25Z\\\"\\n        clipRule=\\\"evenodd\\\"\\n      />\\n    </svg>\\n  );\\n};\\n\\ntype LoadingState = {\\n  text: string;\\n};\\n\\nconst LoaderCore = ({\\n  loadingStates,\\n  value = 0,\\n}: {\\n  loadingStates: LoadingState[];\\n  value?: number;\\n}) => {\\n  return (\\n    <div className=\\\"flex relative justify-start max-w-xl mx-auto flex-col mt-40\\\">\\n      {loadingStates.map((loadingState, index) => {\\n        const distance = Math.abs(index - value);\\n        const opacity = Math.max(1 - distance * 0.2, 0); // Min\",\n            \"imum opacity is 0, keep it 0.2 if you're sane.\\n\\n        return (\\n          <motion.div\\n            key={index}\\n            className={cn(\\\"text-left flex gap-2 mb-4\\\")}\\n            initial={{ opacity: 0, y: -(value * 40) }}\\n            animate={{ opacity: opacity, y: -(value * 40) }}\\n            transition={{ duration: 0.5 }}\\n          >\\n            <div>\\n              {index > value && (\\n                <CheckIcon className=\\\"text-black dark:text-white\\\" />\\n              )}\\n              {index <= \",\n            \"value && (\\n                <CheckFilled\\n                  className={cn(\\n                    \\\"text-black dark:text-white\\\",\\n                    value === index &&\\n                      \\\"text-black dark:text-lime-500 opacity-100\\\"\\n                  )}\\n                />\\n              )}\\n            </div>\\n            <span\\n              className={cn(\\n                \\\"text-black dark:text-white\\\",\\n                value === index && \\\"text-black dark:text-lime-500 opacity-100\\\"\\n              )}\\n       \",\n            \"     >\\n              {loadingState.text}\\n            </span>\\n          </motion.div>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\\nexport const MultiStepLoader = ({\\n  loadingStates,\\n  loading,\\n  duration = 2000,\\n  loop = true,\\n}: {\\n  loadingStates: LoadingState[];\\n  loading?: boolean;\\n  duration?: number;\\n  loop?: boolean;\\n}) => {\\n  const [currentState, setCurrentState] = useState(0);\\n\\n  useEffect(() => {\\n    if (!loading) {\\n      setCurrentState(0);\\n      return;\\n    }\\n    const timeout = setTimeout\",\n            \"(() => {\\n      setCurrentState((prevState) =>\\n        loop\\n          ? prevState === loadingStates.length - 1\\n            ? 0\\n            : prevState + 1\\n          : Math.min(prevState + 1, loadingStates.length - 1)\\n      );\\n    }, duration);\\n\\n    return () => clearTimeout(timeout);\\n  }, [currentState, loading, loop, loadingStates.length, duration]);\\n  return (\\n    <AnimatePresence mode=\\\"wait\\\">\\n      {loading && (\\n        <motion.div\\n          initial={{\\n            opacity: 0,\\n          }}\\n    \",\n            \"      animate={{\\n            opacity: 1,\\n          }}\\n          exit={{\\n            opacity: 0,\\n          }}\\n          className=\\\"w-full h-full fixed inset-0 z-[100] flex items-center justify-center backdrop-blur-2xl\\\"\\n        >\\n          <div className=\\\"h-96  relative\\\">\\n            <LoaderCore value={currentState} loadingStates={loadingStates} />\\n          </div>\\n\\n          <div className=\\\"bg-gradient-to-t inset-x-0 z-20 bottom-0 bg-white dark:bg-black h-full absolute [mask-image:radial-gradient\",\n            \"(900px_at_center,transparent_30%,white)]\\\" />\\n        </motion.div>\\n      )}\\n    </AnimatePresence>\\n  );\\n};\\n\"\n        ],\n        \"client/src/components/ui/placeholders-and-vanish-input.tsx\": [\n            \"\\\"use client\\\";\\n\\nimport { AnimatePresence, motion } from \\\"framer-motion\\\";\\nimport { useCallback, useEffect, useRef, useState } from \\\"react\\\";\\nimport { cn } from \\\"@/lib/utils\\\";\\n\\nexport function PlaceholdersAndVanishInput({\\n  placeholders,\\n  onChange,\\n  onSubmit,\\n}: {\\n  placeholders: string[];\\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\\n}) {\\n  const [currentPlaceholder, setCurrentPlaceholder] = useState(0);\\n\\n  const intervalR\",\n            \"ef = useRef<NodeJS.Timeout | null>(null);\\n  const startAnimation = () => {\\n    intervalRef.current = setInterval(() => {\\n      setCurrentPlaceholder((prev) => (prev + 1) % placeholders.length);\\n    }, 3000);\\n  };\\n  const handleVisibilityChange = () => {\\n    if (document.visibilityState !== \\\"visible\\\" && intervalRef.current) {\\n      clearInterval(intervalRef.current); // Clear the interval when the tab is not visible\\n      intervalRef.current = null;\\n    } else if (document.visibilityState === \\\"vi\",\n            \"sible\\\") {\\n      startAnimation(); // Restart the interval when the tab becomes visible\\n    }\\n  };\\n\\n  useEffect(() => {\\n    startAnimation();\\n    document.addEventListener(\\\"visibilitychange\\\", handleVisibilityChange);\\n\\n    return () => {\\n      if (intervalRef.current) {\\n        clearInterval(intervalRef.current);\\n      }\\n      document.removeEventListener(\\\"visibilitychange\\\", handleVisibilityChange);\\n    };\\n  }, [placeholders]);\\n\\n  const canvasRef = useRef<HTMLCanvasElement>(null);\\n  //eslint-disab\",\n            \"le-next-line\\n  const newDataRef = useRef<any[]>([]);\\n  const inputRef = useRef<HTMLInputElement>(null);\\n  const [value, setValue] = useState(\\\"\\\");\\n  const [animating, setAnimating] = useState(false);\\n\\n  const draw = useCallback(() => {\\n    if (!inputRef.current) return;\\n    const canvas = canvasRef.current;\\n    if (!canvas) return;\\n    const ctx = canvas.getContext(\\\"2d\\\");\\n    if (!ctx) return;\\n\\n    canvas.width = 800;\\n    canvas.height = 800;\\n    ctx.clearRect(0, 0, 800, 800);\\n    const computedS\",\n            \"tyles = getComputedStyle(inputRef.current);\\n\\n    const fontSize = parseFloat(computedStyles.getPropertyValue(\\\"font-size\\\"));\\n    ctx.font = `${fontSize * 2}px ${computedStyles.fontFamily}`;\\n    ctx.fillStyle = \\\"#FFF\\\";\\n    ctx.fillText(value, 16, 40);\\n\\n    const imageData = ctx.getImageData(0, 0, 800, 800);\\n    const pixelData = imageData.data;\\n    //eslint-disable-next-line\\n    const newData: any[] = [];\\n\\n    for (let t = 0; t < 800; t++) {\\n      const i = 4 * t * 800;\\n      for (let n = 0; n < 8\",\n            \"00; n++) {\\n        const e = i + 4 * n;\\n        if (\\n          pixelData[e] !== 0 &&\\n          pixelData[e + 1] !== 0 &&\\n          pixelData[e + 2] !== 0\\n        ) {\\n          newData.push({\\n            x: n,\\n            y: t,\\n            color: [\\n              pixelData[e],\\n              pixelData[e + 1],\\n              pixelData[e + 2],\\n              pixelData[e + 3],\\n            ],\\n          });\\n        }\\n      }\\n    }\\n\\n    newDataRef.current = newData.map(({ x, y, color }) => ({\\n      x,\\n    \",\n            \"  y,\\n      r: 1,\\n      color: `rgba(${color[0]}, ${color[1]}, ${color[2]}, ${color[3]})`,\\n    }));\\n  }, [value]);\\n\\n  useEffect(() => {\\n    draw();\\n  }, [value, draw]);\\n\\n  const animate = (start: number) => {\\n    const animateFrame = (pos: number = 0) => {\\n      requestAnimationFrame(() => {\\n        const newArr = [];\\n        for (let i = 0; i < newDataRef.current.length; i++) {\\n          const current = newDataRef.current[i];\\n          if (current.x < pos) {\\n            newArr.push(current);\\n   \",\n            \"       } else {\\n            if (current.r <= 0) {\\n              current.r = 0;\\n              continue;\\n            }\\n            current.x += Math.random() > 0.5 ? 1 : -1;\\n            current.y += Math.random() > 0.5 ? 1 : -1;\\n            current.r -= 0.05 * Math.random();\\n            newArr.push(current);\\n          }\\n        }\\n        newDataRef.current = newArr;\\n        const ctx = canvasRef.current?.getContext(\\\"2d\\\");\\n        if (ctx) {\\n          ctx.clearRect(pos, 0, 800, 800);\\n          newD\",\n            \"ataRef.current.forEach((t) => {\\n            const { x: n, y: i, r: s, color: color } = t;\\n            if (n > pos) {\\n              ctx.beginPath();\\n              ctx.rect(n, i, s, s);\\n              ctx.fillStyle = color;\\n              ctx.strokeStyle = color;\\n              ctx.stroke();\\n            }\\n          });\\n        }\\n        if (newDataRef.current.length > 0) {\\n          animateFrame(pos - 8);\\n        } else {\\n          setValue(\\\"\\\");\\n          setAnimating(false);\\n        }\\n      });\\n    \",\n            \"};\\n    animateFrame(start);\\n  };\\n\\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\\n    if (e.key === \\\"Enter\\\" && !animating) {\\n      vanishAndSubmit();\\n    }\\n  };\\n\\n  const vanishAndSubmit = () => {\\n    setAnimating(true);\\n    draw();\\n\\n    const value = inputRef.current?.value || \\\"\\\";\\n    if (value && inputRef.current) {\\n      const maxX = newDataRef.current.reduce(\\n        (prev, current) => (current.x > prev ? current.x : prev),\\n        0,\\n      );\\n      animate(maxX);\\n    \",\n            \"}\\n  };\\n\\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\\n    e.preventDefault();\\n    vanishAndSubmit();\\n    //eslint-disable-next-line\\n    onSubmit && onSubmit(e);\\n  };\\n  return (\\n    <form\\n      className={cn(\\n        \\\"w-full relative max-w-xl mx-auto bg-white dark:bg-zinc-800 h-12 rounded-full overflow-hidden shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),_0px_1px_0px_0px_rgba(25,28,33,0.02),_0px_0px_0px_1px_rgba(25,28,33,0.08)] transition duration-200\\\",\\n        value && \\\"bg-gray-50\",\n            \"\\\",\\n      )}\\n      onSubmit={handleSubmit}\\n    >\\n      <canvas\\n        className={cn(\\n          \\\"absolute pointer-events-none  text-base transform scale-50 top-[20%] left-2 sm:left-8 origin-top-left filter invert dark:invert-0 pr-20\\\",\\n          !animating ? \\\"opacity-0\\\" : \\\"opacity-100\\\",\\n        )}\\n        ref={canvasRef}\\n      />\\n      <input\\n        onChange={(e) => {\\n          if (!animating) {\\n            setValue(e.target.value);\\n            //eslint-disable-next-line\\n            onChange && o\",\n            \"nChange(e);\\n          }\\n        }}\\n        onKeyDown={handleKeyDown}\\n        ref={inputRef}\\n        value={value}\\n        type=\\\"text\\\"\\n        className={cn(\\n          \\\"w-full relative text-sm sm:text-base z-50 border-none dark:text-white bg-transparent text-black h-full rounded-full focus:outline-none focus:ring-0 pl-4 sm:pl-10 pr-20\\\",\\n          animating && \\\"text-transparent dark:text-transparent\\\",\\n        )}\\n      />\\n\\n      <button\\n        disabled={!value}\\n        type=\\\"submit\\\"\\n        classN\",\n            \"ame=\\\"absolute right-2 top-1/2 z-50 -translate-y-1/2 h-8 w-8 rounded-full disabled:bg-zinc-600 bg-black transition duration-200 flex items-center justify-center\\\"\\n      >\\n        <motion.svg\\n          xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n          width=\\\"24\\\"\\n          height=\\\"24\\\"\\n          viewBox=\\\"0 0 24 24\\\"\\n          fill=\\\"none\\\"\\n          stroke=\\\"currentColor\\\"\\n          strokeWidth=\\\"2\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          className=\\\"text-gray-300 h-4 w-4\\\"\\n    \",\n            \"    >\\n          <path stroke=\\\"none\\\" d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\" />\\n          <motion.path\\n            d=\\\"M5 12l14 0\\\"\\n            initial={{\\n              strokeDasharray: \\\"50%\\\",\\n              strokeDashoffset: \\\"50%\\\",\\n            }}\\n            animate={{\\n              strokeDashoffset: value ? 0 : \\\"50%\\\",\\n            }}\\n            transition={{\\n              duration: 0.3,\\n              ease: \\\"linear\\\",\\n            }}\\n          />\\n          <path d=\\\"M13 18l6 -6\\\" />\\n          <path d=\\\"M13 6l6 6\\\"\",\n            \" />\\n        </motion.svg>\\n      </button>\\n\\n      <div className=\\\"absolute inset-0 flex items-center rounded-full pointer-events-none\\\">\\n        <AnimatePresence mode=\\\"wait\\\">\\n          {!value && (\\n            <motion.p\\n              initial={{\\n                y: 5,\\n                opacity: 0,\\n              }}\\n              key={`current-placeholder-${currentPlaceholder}`}\\n              animate={{\\n                y: 0,\\n                opacity: 1,\\n              }}\\n              exit={{\\n            \",\n            \"    y: -15,\\n                opacity: 0,\\n              }}\\n              transition={{\\n                duration: 0.3,\\n                ease: \\\"linear\\\",\\n              }}\\n              className=\\\"dark:text-zinc-500 text-sm sm:text-base font-normal text-neutral-500 pl-4 sm:pl-12 text-left w-[calc(100%-2rem)] truncate\\\"\\n            >\\n              {placeholders[currentPlaceholder]}\\n            </motion.p>\\n          )}\\n        </AnimatePresence>\\n      </div>\\n    </form>\\n  );\\n}\\n\"\n        ],\n        \"client/src/components/ui/sonner.tsx\": [\n            \"\\\"use client\\\"\\n\\nimport { useTheme } from \\\"next-themes\\\"\\nimport { Toaster as Sonner } from \\\"sonner\\\"\\n\\ntype ToasterProps = React.ComponentProps<typeof Sonner>\\n\\nconst Toaster = ({ ...props }: ToasterProps) => {\\n  const { theme = \\\"system\\\" } = useTheme()\\n\\n  return (\\n    <Sonner\\n      theme={theme as ToasterProps[\\\"theme\\\"]}\\n      className=\\\"toaster group\\\"\\n      toastOptions={{\\n        classNames: {\\n          toast:\\n            \\\"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground gro\",\n            \"up-[.toaster]:border-border group-[.toaster]:shadow-lg\\\",\\n          description: \\\"group-[.toast]:text-muted-foreground\\\",\\n          actionButton:\\n            \\\"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\\\",\\n          cancelButton:\\n            \\\"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\\\",\\n        },\\n      }}\\n      {...props}\\n    />\\n  )\\n}\\n\\nexport { Toaster }\\n\"\n        ],\n        \"client/src/lib/utils.ts\": [\n            \"import { clsx, type ClassValue } from \\\"clsx\\\"\\nimport { twMerge } from \\\"tailwind-merge\\\"\\n\\nexport function cn(...inputs: ClassValue[]) {\\n  return twMerge(clsx(inputs))\\n}\\n\"\n        ],\n        \"client/src/schemas/url.schema.ts\": [\n            \"import { z } from \\\"zod\\\";\\n\\nconst githubRepoRegex =\\n  /^(https:\\/\\/github\\\\.com\\/[\\\\w-]+\\/[\\\\w-]+|git@github\\\\.com:[\\\\w-]+\\/[\\\\w-]+\\\\.git)$/;\\n\\nexport const urlSchema = z.object({\\n  github_repo_url: z\\n    .string()\\n    .regex(githubRepoRegex, \\\"Invalid GitHub Repository URL\\\"),\\n});\\n\"\n        ],\n        \"client/tailwind.config.ts\": [\n            \"import type { Config } from \\\"tailwindcss\\\";\\n\\nexport default {\\n    darkMode: [\\\"class\\\"],\\n    content: [\\n        \\\"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\\\",\\n        \\\"./src/components/**/*.{js,ts,jsx,tsx,mdx}\\\",\\n        \\\"./src/app/**/*.{js,ts,jsx,tsx,mdx}\\\",\\n    ],\\n    theme: {\\n        extend: {\\n            fontFamily: {\\n                Montserrat: [\\\"Montserrat\\\", \\\"sans-serif\\\"],\\n                Poppins: [\\\"Poppins\\\", \\\"sans-serif\\\"],\\n            },\\n            screens: {\\n                sm: \\\"340px\\\",\\n           \",\n            \"     // => @media (min-width: 640px) { ... }\\n\\n                md: \\\"768px\\\",\\n                // => @media (min-width: 768px) { ... }\\n\\n                lg: \\\"1024px\\\",\\n                // => @media (min-width: 1024px) { ... }\\n            },\\n            colors: {\\n                background: \\\"hsl(var(--background))\\\",\\n                foreground: \\\"hsl(var(--foreground))\\\",\\n                card: {\\n                    DEFAULT: \\\"hsl(var(--card))\\\",\\n                    foreground: \\\"hsl(var(--card-foreground))\\\",\\n\",\n            \"                },\\n                popover: {\\n                    DEFAULT: \\\"hsl(var(--popover))\\\",\\n                    foreground: \\\"hsl(var(--popover-foreground))\\\",\\n                },\\n                primary: {\\n                    DEFAULT: \\\"hsl(var(--primary))\\\",\\n                    foreground: \\\"hsl(var(--primary-foreground))\\\",\\n                },\\n                secondary: {\\n                    DEFAULT: \\\"hsl(var(--secondary))\\\",\\n                    foreground: \\\"hsl(var(--secondary-foreground))\\\",\\n  \",\n            \"              },\\n                muted: {\\n                    DEFAULT: \\\"hsl(var(--muted))\\\",\\n                    foreground: \\\"hsl(var(--muted-foreground))\\\",\\n                },\\n                accent: {\\n                    DEFAULT: \\\"hsl(var(--accent))\\\",\\n                    foreground: \\\"hsl(var(--accent-foreground))\\\",\\n                },\\n                destructive: {\\n                    DEFAULT: \\\"hsl(var(--destructive))\\\",\\n                    foreground: \\\"hsl(var(--destructive-foreground))\\\",\\n       \",\n            \"         },\\n                border: \\\"hsl(var(--border))\\\",\\n                input: \\\"hsl(var(--input))\\\",\\n                ring: \\\"hsl(var(--ring))\\\",\\n                chart: {\\n                    \\\"1\\\": \\\"hsl(var(--chart-1))\\\",\\n                    \\\"2\\\": \\\"hsl(var(--chart-2))\\\",\\n                    \\\"3\\\": \\\"hsl(var(--chart-3))\\\",\\n                    \\\"4\\\": \\\"hsl(var(--chart-4))\\\",\\n                    \\\"5\\\": \\\"hsl(var(--chart-5))\\\",\\n                },\\n            },\\n            borderRadius: {\\n                lg: \\\"var(--ra\",\n            \"dius)\\\",\\n                md: \\\"calc(var(--radius) - 2px)\\\",\\n                sm: \\\"calc(var(--radius) - 4px)\\\",\\n            },\\n        },\\n    },\\n    //eslint-disable-next-line\\n    plugins: [require(\\\"tailwindcss-animate\\\"), require(\\\"@tailwindcss/typography\\\")],\\n} satisfies Config;\\n\"\n        ],\n        \"client/tsconfig.json\": [\n            \"{\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"ES2017\\\",\\n    \\\"lib\\\": [\\\"dom\\\", \\\"dom.iterable\\\", \\\"esnext\\\"],\\n    \\\"allowJs\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"module\\\": \\\"esnext\\\",\\n    \\\"moduleResolution\\\": \\\"bundler\\\",\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"isolatedModules\\\": true,\\n    \\\"jsx\\\": \\\"preserve\\\",\\n    \\\"incremental\\\": true,\\n    \\\"plugins\\\": [\\n      {\\n        \\\"name\\\": \\\"next\\\"\\n      }\\n    ],\\n    \\\"paths\\\": {\\n      \\\"@/*\\\": [\\\"./src/*\\\"]\\n    }\\n  },\\n  \\\"inclu\",\n            \"de\\\": [\\\"next-env.d.ts\\\", \\\"**/*.ts\\\", \\\"**/*.tsx\\\", \\\".next/types/**/*.ts\\\"],\\n  \\\"exclude\\\": [\\\"node_modules\\\"]\\n}\\n\"\n        ],\n        \"server/.air.toml\": [\n            \"root = \\\".\\\"\\ntestdata_dir = \\\"testdata\\\"\\ntmp_dir = \\\"tmp\\\"\\n\\n[build]\\n  args_bin = []\\n  bin = \\\"./tmp/main\\\"\\n  cmd = \\\"go build -o ./tmp/main .\\\"\\n  delay = 1000\\n  exclude_dir = [\\\"assets\\\", \\\"tmp\\\", \\\"vendor\\\", \\\"testdata\\\"]\\n  exclude_file = []\\n  exclude_regex = [\\\"_test.go\\\"]\\n  exclude_unchanged = false\\n  follow_symlink = false\\n  full_bin = \\\"\\\"\\n  include_dir = []\\n  include_ext = [\\\"go\\\", \\\"tpl\\\", \\\"tmpl\\\", \\\"html\\\"]\\n  include_file = []\\n  kill_delay = \\\"0s\\\"\\n  log = \\\"build-errors.log\\\"\\n  poll = false\\n  poll_interval = 0\\n  post_c\",\n            \"md = []\\n  pre_cmd = []\\n  rerun = false\\n  rerun_delay = 500\\n  send_interrupt = false\\n  stop_on_error = false\\n\\n[color]\\n  app = \\\"\\\"\\n  build = \\\"yellow\\\"\\n  main = \\\"magenta\\\"\\n  runner = \\\"green\\\"\\n  watcher = \\\"cyan\\\"\\n\\n[log]\\n  main_only = false\\n  silent = false\\n  time = false\\n\\n[misc]\\n  clean_on_exit = false\\n\\n[proxy]\\n  app_port = 0\\n  enabled = false\\n  proxy_port = 0\\n\\n[screen]\\n  clear_on_rebuild = false\\n  keep_scroll = true\\n\"\n        ],\n        \"server/go.mod\": [\n            \"module docxGen\\n\\ngo 1.23.5\\n\\nrequire (\\n\\tgithub.com/gofiber/fiber/v2 v2.52.6\\n\\tgithub.com/google/generative-ai-go v0.19.0\\n\\tgithub.com/joho/godotenv v1.5.1\\n\\tgoogle.golang.org/api v0.218.0\\n\\tgopkg.in/src-d/go-git.v4 v4.13.1\\n)\\n\\nrequire (\\n\\tcloud.google.com/go v0.115.0 // indirect\\n\\tcloud.google.com/go/ai v0.8.0 // indirect\\n\\tcloud.google.com/go/auth v0.14.0 // indirect\\n\\tcloud.google.com/go/auth/oauth2adapt v0.2.7 // indirect\\n\\tcloud.google.com/go/compute/metadata v0.6.0 // indirect\\n\\tcloud.google.com/go/long\",\n            \"running v0.5.7 // indirect\\n\\tgithub.com/andybalholm/brotli v1.1.0 // indirect\\n\\tgithub.com/emirpasic/gods v1.12.0 // indirect\\n\\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\\n\\tgithub.com/go-logr/logr v1.4.2 // indirect\\n\\tgithub.com/go-logr/stdr v1.2.2 // indirect\\n\\tgithub.com/google/s2a-go v0.1.9 // indirect\\n\\tgithub.com/google/uuid v1.6.0 // indirect\\n\\tgithub.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect\\n\\tgithub.com/googleapis/gax-go/v2 v2.14.1 // indirect\\n\\tgithub.com/jbenet/go-conte\",\n            \"xt v0.0.0-20150711004518-d14ea06fba99 // indirect\\n\\tgithub.com/kevinburke/ssh_config v0.0.0-20190725054713-01f96b0aa0cd // indirect\\n\\tgithub.com/klauspost/compress v1.17.9 // indirect\\n\\tgithub.com/kr/pretty v0.3.1 // indirect\\n\\tgithub.com/mattn/go-colorable v0.1.13 // indirect\\n\\tgithub.com/mattn/go-isatty v0.0.20 // indirect\\n\\tgithub.com/mattn/go-runewidth v0.0.16 // indirect\\n\\tgithub.com/mitchellh/go-homedir v1.1.0 // indirect\\n\\tgithub.com/pkg/errors v0.9.1 // indirect\\n\\tgithub.com/rivo/uniseg v0.4.7 //\",\n            \" indirect\\n\\tgithub.com/rogpeppe/go-internal v1.12.0 // indirect\\n\\tgithub.com/sergi/go-diff v1.0.0 // indirect\\n\\tgithub.com/src-d/gcfg v1.4.0 // indirect\\n\\tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\\n\\tgithub.com/valyala/fasthttp v1.51.0 // indirect\\n\\tgithub.com/valyala/tcplisten v1.0.0 // indirect\\n\\tgithub.com/xanzy/ssh-agent v0.2.1 // indirect\\n\\tgo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 // indirect\\n\\tgo.opentelemetry.io/contrib/instrumentation/net/http/\",\n            \"otelhttp v0.54.0 // indirect\\n\\tgo.opentelemetry.io/otel v1.31.0 // indirect\\n\\tgo.opentelemetry.io/otel/metric v1.31.0 // indirect\\n\\tgo.opentelemetry.io/otel/trace v1.31.0 // indirect\\n\\tgolang.org/x/crypto v0.32.0 // indirect\\n\\tgolang.org/x/net v0.34.0 // indirect\\n\\tgolang.org/x/oauth2 v0.25.0 // indirect\\n\\tgolang.org/x/sync v0.10.0 // indirect\\n\\tgolang.org/x/sys v0.29.0 // indirect\\n\\tgolang.org/x/text v0.21.0 // indirect\\n\\tgolang.org/x/time v0.9.0 // indirect\\n\\tgoogle.golang.org/genproto/googleapis/api v0.\",\n            \"0.0-20241209162323-e6fa225c2576 // indirect\\n\\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20250115164207-1a7da9e5054f // indirect\\n\\tgoogle.golang.org/grpc v1.69.4 // indirect\\n\\tgoogle.golang.org/protobuf v1.36.3 // indirect\\n\\tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\\n\\tgopkg.in/src-d/go-billy.v4 v4.3.2 // indirect\\n\\tgopkg.in/warnings.v0 v0.1.2 // indirect\\n)\\n\"\n        ],\n        \"server/handlers/generateDocx.go\": [\n            \"package handlers\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\n\\t\\\"github.com/google/generative-ai-go/genai\\\"\\n\\t\\\"google.golang.org/api/option\\\"\\n)\\n\\nfunc GenerateDocx(input, apiKey string) (genai.Part, error) {\\n\\tctx := context.Background()\\n\\n\\tif apiKey == \\\"\\\" {\\n\\t\\treturn nil, fmt.Errorf(\\\"API key is required\\\")\\n\\t}\\n\\n\\tclient, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))\\n\\tif err != nil {\\n\\t\\treturn nil, fmt.Errorf(\\\"failed to create client: %v\\\", err)\\n\\t}\\n\\tdefer client.Close()\\n\\n\\tmodel := client.GenerativeModel(\\\"gemini-2.0\",\n            \"-flash-exp\\\")\\n\\n\\tmodel.SetTemperature(1)\\n\\tmodel.SetTopK(40)\\n\\tmodel.SetTopP(0.95)\\n\\tmodel.SetMaxOutputTokens(8192)\\n\\tmodel.ResponseMIMEType = \\\"text/plain\\\"\\n\\n\\tsession := model.StartChat()\\n\\tsession.History = []*genai.Content{\\n\\t\\t{\\n\\t\\t\\tRole: \\\"user\\\",\\n\\t\\t\\tParts: []genai.Part{\\n\\t\\t\\t\\tgenai.Text(\\\"You are an expert backend API documentation writer, specializing in creating concise, well-structured, and developer-friendly documentation. When provided with the **source code in JSON format**, your task is to analyze i\",\n            \"t and write clear backend API documentation in the following format:\\\\n\\\\n---\\\\n\\\\n### Documentation Format:\\\\n- **Route**: {API endpoint route with method here}  \\\\n- **Response**: Include the API response format in JSON, specifying relevant fields and respective status codes.  \\\\n- **Summary**: Provide a short and precise summary describing the purpose and functionality of the API endpoint.  \\\\n\\\\n---\\\\n\\\\n### Example:\\\\n- **Route**: GET /users  \\\\n- **Response**:  \\\\n```json\\\\n{\\\\n    \\\\\\\"status\\\\\\\": 200,\\\\n    \\\\\",\n            \"\\\"data\\\\\\\": [\\\\n        {\\\\n            \\\\\\\"id\\\\\\\": 1,\\\\n            \\\\\\\"name\\\\\\\": \\\\\\\"John Doe\\\\\\\",\\\\n            \\\\\\\"email\\\\\\\": \\\\\\\"johndoe@example.com\\\\\\\"\\\\n        }\\\\n    ]\\\\n}\\\\n```\\\\n- **Summary**: Fetches and returns a list of all users.\\\\n\\\\n---\\\\n\\\\n### Input Format:\\\\nYou will receive the source code as a JSON object in the following structure:\\\\n```json\\\\n{\\\\n    \\\\\\\"data\\\\\\\": {\\\\n        \\\\\\\"fileNameWithExtension\\\\\\\": [\\\\\\\"string\\\\\\\"]\\\\n    }\\\\n}\\\\n```\\\\n\\\\n### Your Task:\\\\n1. Analyze the provided JSON source code file(s) based on the detai\",\n            \"ls given in the `fileNameWithExtension` array.  \\\\n2. Extract all relevant **API routes**, **response structures**, and their corresponding **functional summaries**.  \\\\n3. Generate the documentation, ensuring clarity and developer usability and well formatted for better readability.\\\\n\\\\n##Note for you:\\\\n**Do not write any comments like \\\\\\\"I have understood the code and generated the documentation. Let me know if you want any changes\\\\\\\". Straight up write the documentation, that's it**\\\\n\\\\n--- \\\"),\\n\\t\\t\\t\",\n            \"},\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tRole: \\\"model\\\",\\n\\t\\t\\tParts: []genai.Part{\\n\\t\\t\\t\\tgenai.Text(\\\"```json\\\\n{\\\\n    \\\\\\\"data\\\\\\\": {\\\\n        \\\\\\\"api.py\\\\\\\": [\\\\n            \\\\\\\"from flask import Flask, request, jsonify\\\\\\\",\\\\n            \\\\\\\"import uuid\\\\\\\",\\\\n            \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"app = Flask(__name__)\\\\\\\",\\\\n            \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"stores = {}\\\\\\\",\\\\n            \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"@app.route('/store', methods=['POST'])\\\\\\\",\\\\n            \\\\\\\"def create_store():\\\\\\\",\\\\n            \\\\\\\"   data = request.get_json()\\\\\\\",\\\\n            \\\\\\\"   st\",\n            \"ore_id = uuid.uuid4().hex\\\\\\\",\\\\n            \\\\\\\"   new_store = {\\\\\\\",\\\\n            \\\\\\\"       'id': store_id,\\\\\\\",\\\\n            \\\\\\\"       'name': data['name'],\\\\\\\",\\\\n            \\\\\\\"       'items': []\\\\\\\",\\\\n            \\\\\\\"   }\\\\\\\",\\\\n            \\\\\\\"   stores[store_id] = new_store\\\\\\\",\\\\n            \\\\\\\"   return jsonify(new_store), 201\\\\\\\",\\\\n            \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"@app.route('/store/<string:store_id>', methods=['GET'])\\\\\\\",\\\\n            \\\\\\\"def get_store(store_id):\\\\\\\",\\\\n            \\\\\\\"   if store_id not in stores:\\\\\\\",\\\\n \",\n            \"           \\\\\\\"       return jsonify({'message': 'Store not found'}), 404\\\\\\\",\\\\n            \\\\\\\"   return jsonify(stores[store_id]), 200\\\\\\\",\\\\n            \\\\\\\"\\\\\\\",\\\\n           \\\\\\\"@app.route('/store', methods=['GET'])\\\\\\\",\\\\n           \\\\\\\"def get_all_stores():\\\\\\\",\\\\n           \\\\\\\"   return jsonify(list(stores.values())), 200\\\\\\\",\\\\n            \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"@app.route('/store/<string:store_id>/item', methods=['POST'])\\\\\\\",\\\\n            \\\\\\\"def create_item(store_id):\\\\\\\",\\\\n            \\\\\\\"   if store_id not in stores:\\\\\\\"\",\n            \",\\\\n            \\\\\\\"       return jsonify({'message': 'Store not found'}), 404\\\\\\\",\\\\n            \\\\\\\"   data = request.get_json()\\\\\\\",\\\\n            \\\\\\\"   new_item = {\\\\\\\",\\\\n            \\\\\\\"       'name': data['name'],\\\\\\\",\\\\n            \\\\\\\"       'price': data['price']\\\\\\\",\\\\n            \\\\\\\"   }\\\\\\\",\\\\n            \\\\\\\"   stores[store_id]['items'].append(new_item)\\\\\\\",\\\\n            \\\\\\\"   return jsonify(new_item), 201\\\\\\\",\\\\n             \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"@app.route('/store/<string:store_id>/item', methods=['GET'])\\\\\\\",\\\\n       \",\n            \"     \\\\\\\"def get_all_items_in_store(store_id):\\\\\\\",\\\\n            \\\\\\\"    if store_id not in stores:\\\\\\\",\\\\n            \\\\\\\"        return jsonify({'message': 'Store not found'}), 404\\\\\\\",\\\\n            \\\\\\\"    return jsonify(stores[store_id]['items']), 200\\\\\\\",\\\\n            \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"if __name__ == '__main__':\\\\\\\",\\\\n            \\\\\\\"    app.run(debug=True)\\\\\\\"\\\\n        ]\\\\n    }\\\\n}\\\\n```\\\\n### Documentation:\\\\n- **Route**: POST /store\\\\n- **Response**:\\\\n```json\\\\n{\\\\n    \\\\\\\"id\\\\\\\": \\\\\\\"unique_store_id\\\\\\\",\\\\n    \\\\\\\"name\\\\\\\": \\\\\",\n            \"\\\"store_name\\\\\\\",\\\\n    \\\\\\\"items\\\\\\\": []\\\\n}\\\\n```\\\\nStatus Code: 201\\\\n- **Summary**: Creates a new store with a unique ID and given name, returns the newly created store details.\\\\n\\\\n- **Route**: GET /store/\\\\\\\\<string:store_id\\\\\\\\>\\\\n- **Response**:\\\\n```json\\\\n{\\\\n    \\\\\\\"id\\\\\\\": \\\\\\\"store_id\\\\\\\",\\\\n    \\\\\\\"name\\\\\\\": \\\\\\\"store_name\\\\\\\",\\\\n    \\\\\\\"items\\\\\\\": [\\\\n        {\\\\n            \\\\\\\"name\\\\\\\": \\\\\\\"item_name\\\\\\\",\\\\n            \\\\\\\"price\\\\\\\": 10.00\\\\n        }\\\\n    ]\\\\n}\\\\n```\\\\nStatus Code: 200,\\\\n```json\\\\n{\\\\n    \\\\\\\"message\\\\\\\": \\\\\\\"Store not found\\\\\\\"\\\\n}\",\n            \"\\\\n```\\\\nStatus Code: 404\\\\n- **Summary**: Retrieves and returns the details of a specific store using its ID. Returns a 404 if not found.\\\\n\\\\n- **Route**: GET /store\\\\n- **Response**:\\\\n```json\\\\n[\\\\n    {\\\\n        \\\\\\\"id\\\\\\\": \\\\\\\"store_id\\\\\\\",\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"store_name\\\\\\\",\\\\n        \\\\\\\"items\\\\\\\": [\\\\n            {\\\\n                \\\\\\\"name\\\\\\\": \\\\\\\"item_name\\\\\\\",\\\\n                \\\\\\\"price\\\\\\\": 10.00\\\\n            }\\\\n        ]\\\\n    }\\\\n]\\\\n```\\\\nStatus Code: 200\\\\n- **Summary**: Retrieves and returns a list of all stores.\\\\n\\\\n\",\n            \"- **Route**: POST /store/\\\\\\\\<string:store_id\\\\\\\\>/item\\\\n- **Response**:\\\\n```json\\\\n{\\\\n    \\\\\\\"name\\\\\\\": \\\\\\\"item_name\\\\\\\",\\\\n    \\\\\\\"price\\\\\\\": 10.00\\\\n}\\\\n```\\\\nStatus Code: 201,\\\\n```json\\\\n{\\\\n    \\\\\\\"message\\\\\\\": \\\\\\\"Store not found\\\\\\\"\\\\n}\\\\n```\\\\nStatus Code: 404\\\\n- **Summary**: Adds a new item to a specific store given its ID. Returns the newly created item, or 404 if the store is not found.\\\\n\\\\n- **Route**: GET /store/\\\\\\\\<string:store_id\\\\\\\\>/item\\\\n- **Response**:\\\\n```json\\\\n[\\\\n    {\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"item_name\\\\\\\",\\\\n       \",\n            \" \\\\\\\"price\\\\\\\": 10.00\\\\n    }\\\\n]\\\\n```\\\\nStatus Code: 200,\\\\n```json\\\\n{\\\\n    \\\\\\\"message\\\\\\\": \\\\\\\"Store not found\\\\\\\"\\\\n}\\\\n```\\\\nStatus Code: 404\\\\n- **Summary**: Retrieves and returns a list of all items from a specific store, returns a 404 if store is not found.\\\\n\\\"),\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tRole: \\\"user\\\",\\n\\t\\t\\tParts: []genai.Part{\\n\\t\\t\\t\\tgenai.Text(\\\"{\\\\n    \\\\\\\"data\\\\\\\": {\\\\n        \\\\\\\"backend/LocalAuth.js\\\\\\\": [\\\\n            \\\\\\\"const LocalStrategy = require(\\\\\\\\\\\\\\\"passport-local\\\\\\\\\\\\\\\").Strategy;\\\\\\\\nconst UserModel = require(\\\\\\\\\\\\\\\"./models/U\",\n            \"ser\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nexports.initializePassport = (passport) => {\\\\\\\\n  passport.use(\\\\\\\\n    new LocalStrategy(async (username, password, done) => {\\\\\\\\n      const user = await UserModel.findOne({ username });\\\\\\\\n\\\\\\\\n      if (!user) return done(null, false);\\\\\\\\n\\\\\\\\n      if (user.password !== password) return done(null, false);\\\\\\\\n\\\\\\\\n      return done(null, user);\\\\\\\\n    })\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  passport.serializeUser((user, done) => {\\\\\\\\n    done(null, user.i\\\\\\\",\\\\n            \\\\\\\"d);\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  passport.deserializeUs\",\n            \"er((id, done) => {\\\\\\\\n    const user = UserModel.find(u => u.id === id);\\\\\\\\n    done(null, user);\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/Oauth.js\\\\\\\": [\\\\n            \\\\\\\"// const GoogleStrategy = require(\\\\\\\\\\\\\\\"passport-google-oauth20\\\\\\\\\\\\\\\").Strategy;\\\\\\\\n// const GoogleUsers = require(\\\\\\\\\\\\\\\"./models/GoogleUsers\\\\\\\\\\\\\\\");\\\\\\\\n// const Users = require(\\\\\\\\\\\\\\\"./models/GoogleUsers\\\\\\\\\\\\\\\");\\\\\\\\n// const findOrCreate = require(\\\\\\\\\\\\\\\"mongoose-findorcreate\\\\\\\\\\\\\\\");\\\\\\\\n// require(\\\\\\\\\\\\\\\"dotenv\\\\\\\\\\\\\\\").config();\\\\\\\\n\\\\\\\\n// // Configur\",\n            \"e Passport\\\\\\\\n\\\\\\\\n// exports.initializeGoogleAuth = (passport) => {\\\\\\\\n//   passport.use(\\\\\\\\n//     new GoogleStrategy(\\\\\\\\n//       {\\\\\\\\n//         clientID: process.env.GOOGLE_CLIENT_ID,\\\\\\\\n//         clientSecret: process.env.GOOGLE_CLIEN\\\\\\\",\\\\n            \\\\\\\"T_SECRET,\\\\\\\\n//         callbackURL: \\\\\\\\\\\\\\\"http://localhost:5000/auth/google/callback\\\\\\\\\\\\\\\",\\\\\\\\n//       },\\\\\\\\n//       function (accessToken, refreshToken, profile, cb) {\\\\\\\\n//         GoogleUsers.findOrCreate(\\\\\\\\n//           {\\\\\\\\n//             googleId: \",\n            \"profile.id,\\\\\\\\n//             googleName: profile.displayName,\\\\\\\\n//           },\\\\\\\\n//           function (err, user) {\\\\\\\\n//             return cb(err, profile);\\\\\\\\n//           }\\\\\\\\n//         );\\\\\\\\n//       }\\\\\\\\n//     )\\\\\\\\n//   );\\\\\\\\n//   passport.serializeUser((user, done) => {\\\\\\\\n//     done(nul\\\\\\\",\\\\n            \\\\\\\"l, user.id);\\\\\\\\n//   });\\\\\\\\n\\\\\\\\n//   passport.deserializeUser((id, done) => {\\\\\\\\n//     GoogleUsers.findById(id, (err, user) => {\\\\\\\\n//       done(err, user);\\\\\\\\n//     });\\\\\\\\n//   });\\\\\\\\n// };\\\\\\\\n\\\\\",\n            \"\\\"\\\\n        ],\\\\n        \\\\\\\"backend/index.js\\\\\\\": [\\\\n            \\\\\\\"const express = require(\\\\\\\\\\\\\\\"express\\\\\\\\\\\\\\\");\\\\\\\\nconst UserModel = require(\\\\\\\\\\\\\\\"./models/User\\\\\\\\\\\\\\\");\\\\\\\\nconst HeroProductsModel = require(\\\\\\\\\\\\\\\"./models/HeroProducts\\\\\\\\\\\\\\\");\\\\\\\\nconst ProductsModel = require(\\\\\\\\\\\\\\\"./models/Products\\\\\\\\\\\\\\\");\\\\\\\\nconst cors = require(\\\\\\\\\\\\\\\"cors\\\\\\\\\\\\\\\");\\\\\\\\nconst session = require(\\\\\\\\\\\\\\\"express-session\\\\\\\\\\\\\\\");\\\\\\\\nconst passport = require(\\\\\\\\\\\\\\\"passport\\\\\\\\\\\\\\\");\\\\\\\\n// const jwt = require(\\\\\\\\\\\\\\\"jsonwebtoken\\\\\\\\\\\\\\\");\\\\\\\\nrequire(\\\\\\\\\\\\\\\"dotenv\\\\\\\\\\\\\\\").config\",\n            \"();\\\\\\\\nconst stripe = require(\\\\\\\\\\\\\\\"stripe\\\\\\\\\\\\\\\")(process.env.STRIPE_SECRET_KEY);\\\\\\\\nconst mongoose = require(\\\\\\\\\\\\\\\"mongoose\\\\\\\\\\\\\\\");\\\\\\\\nconst { initializePasspor\\\\\\\",\\\\n            \\\\\\\"t } = require(\\\\\\\\\\\\\\\"./LocalAuth\\\\\\\\\\\\\\\");\\\\\\\\n// require(\\\\\\\\\\\\\\\"./Oauth\\\\\\\\\\\\\\\");\\\\\\\\n// const { initializeGoogleAuth } = require(\\\\\\\\\\\\\\\"./Oauth\\\\\\\\\\\\\\\");\\\\\\\\nconst bodyParser = require(\\\\\\\\\\\\\\\"body-parser\\\\\\\\\\\\\\\");\\\\\\\\nconst app = express();\\\\\\\\n\\\\\\\\napp.use(\\\\\\\\n    cors({\\\\\\\\n        origin: process.env.FRONTEND_DOMAIN,\\\\\\\\n        methods: \\\\\\\\\\\\\\\"GET,HEAD,PUT,PATCH,POST,DEL\",\n            \"ETE\\\\\\\\\\\\\\\",\\\\\\\\n        allowedHeaders: [\\\\\\\\\\\\\\\"Content-Type\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Authorization\\\\\\\\\\\\\\\"],\\\\\\\\n        credentials: true,\\\\\\\\n    }),\\\\\\\\n);\\\\\\\\napp.use(express.json());\\\\\\\\n\\\\\\\\ninitializePassport(passport);\\\\\\\\n// initializeGoogleAuth(passport);\\\\\\\\n\\\\\\\\napp.use(bodyParser.\\\\\\\",\\\\n            \\\\\\\"json());\\\\\\\\napp.use(bodyParser.urlencoded({ extended: true }));\\\\\\\\n\\\\\\\\napp.use(\\\\\\\\n    session({\\\\\\\\n        secret: \\\\\\\\\\\\\\\"jai Shree Ram\\\\\\\\\\\\\\\",\\\\\\\\n        resave: false,\\\\\\\\n        saveUninitialized: false,\\\\\\\\n    }),\\\\\\\\n);\\\\\\\\n\\\\\\\\napp.use(passport.\",\n            \"initialize());\\\\\\\\napp.use(passport.session());\\\\\\\\n\\\\\\\\n//Serving Static files:\\\\\\\\napp.use(express.static(__dirname + \\\\\\\\\\\\\\\"/Images\\\\\\\\\\\\\\\"));\\\\\\\\n\\\\\\\\napp.get(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\", (req, res) => {\\\\\\\\n    res.send(\\\\\\\\\\\\\\\"Backend Successfully working!!\\\\\\\\\\\\\\\");\\\\\\\\n});\\\\\\\\n//Local Authentication:\\\\\\\\n\\\\\\\\napp.post(\\\\\\\\\\\\\\\"/register\\\\\\\\\\\\\\\", async (req, res) => {\\\\\\\\n    const ExistingUser = awa\\\\\\\",\\\\n            \\\\\\\"it UserModel.findOne({ username: req.body.username });\\\\\\\\n\\\\\\\\n    if (ExistingUser) return res.status(201).json({ ExistingUser });\\\\\\\\n\\\\\\\\n   \",\n            \" const user = await UserModel.create(req.body);\\\\\\\\n\\\\\\\\n    res.status(200).json({ user });\\\\\\\\n});\\\\\\\\n\\\\\\\\napp.post(\\\\\\\\\\\\\\\"/login\\\\\\\\\\\\\\\", passport.authenticate(\\\\\\\\\\\\\\\"local\\\\\\\\\\\\\\\"), async (req, res) => {\\\\\\\\n    const User = req.user;\\\\\\\\n    const user = await UserModel.findOne({\\\\\\\\n        username: User.username,\\\\\\\\n    }).populate(\\\\\\\\\\\\\\\"cart.items.product\\\\\\\\\\\\\\\");\\\\\\\\n    res.send({ user });\\\\\\\\n});\\\\\\\\n\\\\\\\\n//Product list\\\\\\\\napp.get(\\\\\\\\\\\\\\\"/HeroProducts\\\\\\\",\\\\n            \\\\\\\"\\\\\\\\\\\\\\\", async (req, res) => {\\\\\\\\n    const HProducts = await Her\",\n            \"oProductsModel.find();\\\\\\\\n    res.json(HProducts);\\\\\\\\n});\\\\\\\\n\\\\\\\\napp.get(\\\\\\\\\\\\\\\"/Products\\\\\\\\\\\\\\\", async (req, res) => {\\\\\\\\n    const Products = await ProductsModel.find();\\\\\\\\n    res.json(Products);\\\\\\\\n});\\\\\\\\n\\\\\\\\napp.get(\\\\\\\\\\\\\\\"/product/:id\\\\\\\\\\\\\\\", async (req, res) => {\\\\\\\\n    const id = req.params.id;\\\\\\\\n    const Product = await ProductsModel.findById(id);\\\\\\\\n    res.json(Product);\\\\\\\\n});\\\\\\\\n\\\\\\\\n//Cart functionality\\\\\\\\napp.post(\\\\\\\\\\\\\\\"/add-to-cart\\\\\\\\\\\\\\\", async (req, res) => {\\\\\\\\n    const { productId, userId } = req.body;\\\\\\\\n\\\\\\\"\",\n            \",\\\\n            \\\\\\\"\\\\\\\\n    try {\\\\\\\\n        const product = await ProductsModel.findById(productId);\\\\\\\\n        const user = await UserModel.findById(userId);\\\\\\\\n\\\\\\\\n        if (!product || !user) {\\\\\\\\n            return res.status(404).json({ message: \\\\\\\\\\\\\\\"Product or User not found\\\\\\\\\\\\\\\" });\\\\\\\\n        }\\\\\\\\n\\\\\\\\n        const cartItem = user.cart.items.find((item) => item.product == productId);\\\\\\\\n\\\\\\\\n        if (cartItem) {\\\\\\\\n            cartItem.quantity += 1;\\\\\\\\n        } else {\\\\\\\\n            user.cart.items.\",\n            \"push({ product: productId });\\\\\\\\n        }\\\\\\\\n\\\\\\\\n        //\\\\\\\",\\\\n            \\\\\\\" Update total price\\\\\\\\n        user.cart.totalPrice += product.discountPrice;\\\\\\\\n\\\\\\\\n        await user.populate(\\\\\\\\\\\\\\\"cart.items.product\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        await user.save();\\\\\\\\n\\\\\\\\n        res.json({\\\\\\\\n            message: \\\\\\\\\\\\\\\"Added To cart\\\\\\\\\\\\\\\",\\\\\\\\n            data: user.cart,\\\\\\\\n        });\\\\\\\\n    } catch (error) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"Error adding to cart\\\\\\\\\\\\\\\", error);\\\\\\\\n        res.status(500).json({ message: \\\\\\\\\\\\\\\"Intern\",\n            \"al server error\\\\\\\\\\\\\\\" });\\\\\\\\n    }\\\\\\\\n});\\\\\\\\n\\\\\\\\n//Categorization:\\\\\\\\n\\\\\\\\napp.get(\\\\\\\\\\\\\\\"/products/:category\\\\\\\\\\\\\\\", async (req, res) => {\\\\\\\\n    const category \\\\\\\",\\\\n            \\\\\\\"= req.params.category;\\\\\\\\n    const products = await ProductsModel.find({ category: category });\\\\\\\\n    res.json(products);\\\\\\\\n});\\\\\\\\n\\\\\\\\n//Stripe Integration:\\\\\\\\n\\\\\\\\napp.post(\\\\\\\\\\\\\\\"/create-checkout-session\\\\\\\\\\\\\\\", async (req, res) => {\\\\\\\\n    const { products } = req.body;\\\\\\\\n\\\\\\\\n    const LineItems = products.map((item) => ({\\\\\\\\n        price_data\",\n            \": {\\\\\\\\n            currency: \\\\\\\\\\\\\\\"inr\\\\\\\\\\\\\\\",\\\\\\\\n            product_data: {\\\\\\\\n                name: item.product.name,\\\\\\\\n            },\\\\\\\\n            unit_amount: item.product.discountPrice * 100,\\\\\\\\n        },\\\\\\\\n      \\\\\\\",\\\\n            \\\\\\\"  quantity: item.quantity,\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    const session = await stripe.checkout.sessions.create({\\\\\\\\n        payment_method_types: [\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\"],\\\\\\\\n        line_items: LineItems,\\\\\\\\n        mode: \\\\\\\\\\\\\\\"payment\\\\\\\\\\\\\\\",\\\\\\\\n        success_url: `${process.env.FRONTEND_DOMA\",\n            \"IN}/paymentSuccess`,\\\\\\\\n        cancel_url: `${process.env.FRONTEND_DOMAIN}/paymentFailed`,\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    res.json({ id: session.id });\\\\\\\\n});\\\\\\\\n\\\\\\\\n//Google Auth\\\\\\\\n// app.get(\\\\\\\\n//   \\\\\\\\\\\\\\\"/auth/google\\\\\\\\\\\\\\\",\\\\\\\\n//   passport.authenticate(\\\\\\\\\\\\\\\"google\\\\\\\\\\\\\\\", { scope: [\\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\"] })\\\\\\\\n// );\\\\\\\\n\\\\\\\\n// app\\\\\\\",\\\\n            \\\\\\\".get(\\\\\\\\n//   \\\\\\\\\\\\\\\"/auth/google/callback\\\\\\\\\\\\\\\",\\\\\\\\n//   passport.authenticate(\\\\\\\\\\\\\\\"google\\\\\\\\\\\\\\\", {\\\\\\\\n//     failureRedirect: \\\\\\\\\\\\\\\"http://localhost:5173/Login\\\\\\\\\\\\\\\",\\\\\\\\n//   }),\\\\\\\\n//   (req, r\",\n            \"es) => {\\\\\\\\n//     // Successful authentication, redirect to the home page\\\\\\\\n//     res.redirect(\\\\\\\\\\\\\\\"http://localhost:5173/\\\\\\\\\\\\\\\");\\\\\\\\n//   }\\\\\\\\n// );\\\\\\\\n\\\\\\\\napp.listen(5000, () => {\\\\\\\\n    console.log(\\\\\\\\\\\\\\\"Server listening on http://localhost:5000\\\\\\\\\\\\\\\");\\\\\\\\n});\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/middlewares/isAuthenticated.js\\\\\\\": [\\\\n            \\\\\\\"const jwt = require(\\\\\\\\\\\\\\\"jsonwebtoken\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nexports.isAuthenticated = (req, res, next) => {\\\\\\\\n  // Get the token from the request headers\\\\\\\\n  const token = r\",\n            \"eq.headers.authorization;\\\\\\\\n  // Check if token is provided\\\\\\\\n  if (!token) {\\\\\\\\n    return res.status(401).json({ message: \\\\\\\\\\\\\\\"Unauthorized: No token provided\\\\\\\\\\\\\\\" });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Verify the token\\\\\\\\n  jwt.verify(token, \\\\\\\\\\\\\\\"jai Shree Ram\\\\\\\\\\\\\\\", (err, decoded) => {\\\\\\\\n    if (err) {\\\\\\\\n      if (err.name === \\\\\\\\\\\\\\\"TokenExpiredError\\\\\\\\\\\\\\\") {\\\\\\\\n        return res.status(401).json({ message: \\\\\\\\\\\\\\\"Unaut\\\\\\\",\\\\n            \\\\\\\"horized: Token expired\\\\\\\\\\\\\\\" });\\\\\\\\n      } else {\\\\\\\\n        return res.status(401).json({\",\n            \" message: \\\\\\\\\\\\\\\"Unauthorized: Invalid token\\\\\\\\\\\\\\\" });\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    // Token is valid, set the decoded user on the request object\\\\\\\\n    req.user = decoded.user;\\\\\\\\n    next();\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/models/GoogleUsers.js\\\\\\\": [\\\\n            \\\\\\\"const mongoose = require(\\\\\\\\\\\\\\\"mongoose\\\\\\\\\\\\\\\");\\\\\\\\nconst findOrCreate = require(\\\\\\\\\\\\\\\"mongoose-findorcreate\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst GoogleUsersSchema = mongoose.Schema(\\\\\\\\n  {\\\\\\\\n    googleId: {\\\\\\\\n      type: String,\\\\\\\\n      required: true,\\\\\\\\n \",\n            \"     unique: true,\\\\\\\\n    },\\\\\\\\n    googleName: {\\\\\\\\n      type: String,\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n    role: {\\\\\\\\n      type: String,\\\\\\\\n      enum: [\\\\\\\\\\\\\\\"customer\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\"],\\\\\\\\n      default: \\\\\\\\\\\\\\\"customer\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    cart: {\\\\\\\\n      items: [\\\\\\\\n        {\\\\\\\\n          productId: {\\\\\\\\n            type: mongoose.Schema.Types.Object\\\\\\\",\\\\n            \\\\\\\"Id,\\\\\\\\n            ref: \\\\\\\\\\\\\\\"Product\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          quantity: {\\\\\\\\n            type: Number,\\\\\\\\n            default: 1,\\\\\",\n            \"\\\\n          },\\\\\\\\n        },\\\\\\\\n      ],\\\\\\\\n    },\\\\\\\\n    // You can add additional fields specific to Google users here\\\\\\\\n    // For example, profile picture, access token, etc.\\\\\\\\n    profilePicture: String,\\\\\\\\n    accessToken: String,\\\\\\\\n    refreshToken: String,\\\\\\\\n    // Other fields you may need\\\\\\\\n  },\\\\\\\\n  { timestamps: true }\\\\\\\\n); // Add timestamps for createdAt and updatedAt\\\\\\\\nGoogleUsersSchema.plugin(findOr\\\\\\\",\\\\n            \\\\\\\"Create);\\\\\\\\n\\\\\\\\nmodule.exports = mongoose.model(\\\\\\\\\\\\\\\"GoogleUsers\\\\\\\\\\\\\\\", Goo\",\n            \"gleUsersSchema);\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/models/HeroProducts.js\\\\\\\": [\\\\n            \\\\\\\"const mongoose = require('mongoose')\\\\\\\\n\\\\\\\\nconst HeroProductSchema = mongoose.Schema({\\\\\\\\n    name:String,\\\\\\\\n    price:Number,\\\\\\\\n    discountPrice:Number,\\\\\\\\n    productImg:String,\\\\\\\\n    category:String,\\\\\\\\n})\\\\\\\\n\\\\\\\\nmodule.exports = mongoose.model('HeroProduct', HeroProductSchema)\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/models/Products.js\\\\\\\": [\\\\n            \\\\\\\"const mongoose = require(\\\\\\\\\\\\\\\"mongoose\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst \",\n            \"ProductSchema = mongoose.Schema({\\\\\\\\n  name: {\\\\\\\\n    type: String,\\\\\\\\n    required: true,\\\\\\\\n  },\\\\\\\\n  price: {\\\\\\\\n    type: Number,\\\\\\\\n    required: true,\\\\\\\\n  },\\\\\\\\n  discountPrice: Number,\\\\\\\\n  productImg: {\\\\\\\\n    type: String,\\\\\\\\n    required: true,\\\\\\\\n  },\\\\\\\\n  company: String,\\\\\\\\n  productDetails:{\\\\\\\\n    type:Array\\\\\\\\n  },\\\\\\\\n  totalStock: Number,\\\\\\\\n  inStock: Boolean,\\\\\\\\n});\\\\\\\\n\\\\\\\\nmodule.exports = mongoose.model(\\\\\\\\\\\\\\\"Products\\\\\\\\\\\\\\\", ProductSchema);\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/models/User.js\\\\\\\": [\\\\n   \",\n            \"         \\\\\\\"const mongoose = require(\\\\\\\\\\\\\\\"mongoose\\\\\\\\\\\\\\\");\\\\\\\\nrequire(\\\\\\\\\\\\\\\"dotenv\\\\\\\\\\\\\\\").config();\\\\\\\\n\\\\\\\\nmongoose.connect(process.env.MONGODB_URI);\\\\\\\\n\\\\\\\\nconst UserSchema = mongoose.Schema({\\\\\\\\n  name: {\\\\\\\\n    type: String,\\\\\\\\n    required: true,\\\\\\\\n  },\\\\\\\\n  username: {\\\\\\\\n    type: String,\\\\\\\\n    required: true,\\\\\\\\n  },\\\\\\\\n  email: {\\\\\\\\n    type: String,\\\\\\\\n    required: true,\\\\\\\\n    unique: true,\\\\\\\\n  },\\\\\\\\n  password: {\\\\\\\\n    type: String,\\\\\\\\n    required: true,\\\\\\\\n  },\\\\\\\\n  pfp: String,\\\\\\\\n  googleID: String,\\\\\\\\n  goo\",\n            \"gleName: String,\\\\\\\\n  address: {\\\\\\\\n    street: String,\\\\\\\\n    city: String,\\\\\\\\n    s\\\\\\\",\\\\n            \\\\\\\"tate: String,\\\\\\\\n    pinCode: String,\\\\\\\\n    country: String,\\\\\\\\n  },\\\\\\\\n  role: {\\\\\\\\n    type: String,\\\\\\\\n    enum: [\\\\\\\\\\\\\\\"customer\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\"],\\\\\\\\n    default: \\\\\\\\\\\\\\\"customer\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  cart: {\\\\\\\\n    items: [\\\\\\\\n      {\\\\\\\\n        product: {\\\\\\\\n          type: mongoose.Schema.Types.ObjectId,\\\\\\\\n          ref: \\\\\\\\\\\\\\\"Products\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n        quantity: {\\\\\\\\n          type: Number,\\\\\\\\n        \",\n            \"  default: 1,\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n    ], //Items array(objects)\\\\\\\\n\\\\\\\\n    totalPrice: {\\\\\\\\n      type: Number,\\\\\\\\n      default: 0,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  createdAt: {\\\\\\\\n    type: Da\\\\\\\",\\\\n            \\\\\\\"te,\\\\\\\\n    default: Date.now,\\\\\\\\n  },\\\\\\\\n});\\\\\\\\n\\\\\\\\nmodule.exports = mongoose.model(\\\\\\\\\\\\\\\"Users\\\\\\\\\\\\\\\", UserSchema);\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/package.json\\\\\\\": [\\\\n            \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"backend\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"1.0.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"main\\\\\\\\\\\\\",\n            \"\\\": \\\\\\\\\\\\\\\"index.js\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"test\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"echo \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Error: no test specified\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" && exit 1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"start\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"node index.js\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"dev\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"nodemon index.js\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"keywords\\\\\\\\\\\\\\\": [],\\\\\\\\n  \\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"license\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"ISC\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"dependencies\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"body-parser\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^1.20.2\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"cors\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^2.8.5\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"dotenv\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^16.4.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"express\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^4.18.2\\\\\\\\\\\\\\\",\",\n            \"\\\\\\\\n    \\\\\\\\\\\\\\\"express-session\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^1.18.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"jsonwebtoken\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^9.0.2\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"jwt-decode\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^4.0.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\",\\\\n            \\\\\\\"\\\\\\\\\\\\\\\"mongoose\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^8.0.4\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"mongoose-findorcreate\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^4.0.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"nodemon\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^3.0.2\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"passport\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^0.7.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"passport-google-oauth20\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^2.0.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"passport-local\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^1.0.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"passport-local-mongoose\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^8.0.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"stripe\\\\\\\\\",\n            \"\\\\\\\": \\\\\\\\\\\\\\\"^14.17.0\\\\\\\\\\\\\\\"\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"backend/vercel.json\\\\\\\": [\\\\n            \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": 2,\\\\\\\\n  \\\\\\\\\\\\\\\"builds\\\\\\\\\\\\\\\": [\\\\\\\\n    {\\\\\\\\n      \\\\\\\\\\\\\\\"src\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"*.js\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"use\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"@vercel/node\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n  ],\\\\\\\\n  \\\\\\\\\\\\\\\"routes\\\\\\\\\\\\\\\": [\\\\\\\\n    {\\\\\\\\n      \\\\\\\\\\\\\\\"src\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/(.*)\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"dest\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\"\\\\\\\\n    }\\\\\\\\n  ]\\\\\\\\n}\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/'\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { useState } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\ni\",\n            \"mport { Link } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { useNavigate } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { useDispatch } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport { loginUser } from \\\\\\\\\\\\\\\"../features/auth/authActions\\\\\\\\\\\\\\\";\\\\\\\\n// import { GoogleLoginSuccess } from \\\\\\\\\\\\\\\"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport { toast } from \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\";\\\\\\\\nimport { useGSAP } from \\\\\\\\\\\\\\\"@gsap/react\\\\\\\\\\\\\\\";\\\\\\\\nimport gsap from \\\\\\\\\\\\\\\"gsap\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nexport default function LoginPage() {\\\\\\\\n  useGSAP(() => {\\\\\\\\n    gsap.fro\",\n            \"m(\\\\\\\\\\\\\\\".Form\\\\\\\",\\\\n            \\\\\\\"Card\\\\\\\\\\\\\\\", {\\\\\\\\n      opacity: 0,\\\\\\\\n      y: 100,\\\\\\\\n      delay: 0.8,\\\\\\\\n      duration: 1,\\\\\\\\n    });\\\\\\\\n    gsap.from(\\\\\\\\\\\\\\\".backText\\\\\\\\\\\\\\\", {\\\\\\\\n      y: -100,\\\\\\\\n      opacity: 0,\\\\\\\\n      duration: 0.5,\\\\\\\\n    });\\\\\\\\n  });\\\\\\\\n  const navigateTo = useNavigate();\\\\\\\\n  const dispatch = useDispatch();\\\\\\\\n\\\\\\\\n  const [username, setusername] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  const [password, setpassword] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n  const handleLogin = async (e) => {\\\\\\\\n    e.preventDefault();\",\n            \"\\\\\\\\n    try {\\\\\\\\n      dispatch(loginUser({ username, password }));\\\\\\\\n      navigateTo(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\");\\\\\\\\n    \\\\\\\",\\\\n            \\\\\\\"} catch (error) {\\\\\\\\n      toast.error(\\\\\\\\\\\\\\\"Login failed, please try again\\\\\\\\\\\\\\\");\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"relative  h-screen w-full bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\" absolute left-1/2 top-1/2 z-0 h-auto w-full -translate-x-1/2 -translate-y-1/2  \\\\\\\\\\\\\\\">\\\\\\\\n          <h1 className=\\\\\\\\\\\\\\\"backText text-center font-[Montserrat] text-[3\",\n            \"0vh] uppercase tracking-widest text-[#72748e]\\\\\\\\\\\\\\\">\\\\\\\\n            Login\\\\\\\\n          </h1>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"relative z-10 flex h-screen w-full ite\\\\\\\",\\\\n            \\\\\\\"ms-center justify-center\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"FormCard flex h-[50vh] w-[35vw] items-center  rounded-2xl border-2 p-10 backdrop-blur-lg\\\\\\\\\\\\\\\">\\\\\\\\n            <form\\\\\\\\n              onSubmit={handleLogin}\\\\\\\\n              className=\\\\\\\\\\\\\\\"flex h-full w-full flex-col items-center justify-center gap-10\\\\\\\\\",\n            \"\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <h1 className=\\\\\\\\\\\\\\\"pt-14 font-[Poppins] text-4xl font-extrabold text-white\\\\\\\\\\\\\\\">\\\\\\\\n                Login\\\\\\\\n              </h1>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full flex-col gap-2\\\\\\\\\\\\\\\">\\\\\\\\n          \\\\\\\",\\\\n            \\\\\\\"      <h1 className=\\\\\\\\\\\\\\\"text-white\\\\\\\\\\\\\\\">Username</h1>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n                  name=\\\\\\\\\\\\\\\"Username\\\\\\\\\\\\\\\"\\\\\\\\n                  value={username}\\\\\\\\n                  onChange={(e) => setusernam\",\n            \"e(e.target.value)}\\\\\\\\n                  className=\\\\\\\\\\\\\\\"block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dar\\\\\\\",\\\\n            \\\\\\\"k:focus:ring-blue-500\\\\\\\\\\\\\\\"\\\\\\\\n                  placeholder=\\\\\\\\\\\\\\\"Enter your username\\\\\\\\\\\\\\\"\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <input\\\\\\\\n                type=\\\\\\\\\\\\\\\"password\\\\\\\\\",\n            \"\\\\\\\"\\\\\\\\n                name=\\\\\\\\\\\\\\\"Password\\\\\\\\\\\\\\\"\\\\\\\\n                value={password}\\\\\\\\n                onChange={(e) => setpassword(e.target.value)}\\\\\\\\n                placeholder=\\\\\\\\\\\\\\\"Enter your password\\\\\\\\\\\\\\\"\\\\\\\\n                className=\\\\\\\\\\\\\\\"block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 \\\\\\\",\\\\n            \\\\\\\"dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:rin\",\n            \"g-blue-500\\\\\\\\\\\\\\\"\\\\\\\\n              />\\\\\\\\n              <button className=\\\\\\\\\\\\\\\"mt-10 w-[60%] rounded-2xl bg-[#676eff] font-[Poppins] text-2xl font-bold\\\\\\\\\\\\\\\">\\\\\\\\n                Login\\\\\\\\n              </button>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"mt-8 flex gap-2 text-xl text-[#72748e]\\\\\\\\\\\\\\\">\\\\\\\\n                <h3>New Here??</h3>\\\\\\\\n                <Link\\\\\\\\n                  to=\\\\\\\\\\\\\\\"/Register\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"text-\\\\\\\",\\\\n            \\\\\\\"[#676eff] hover:text-[#313690]\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n   \",\n            \"               Create Account\\\\\\\\n                </Link>\\\\\\\\n              </div>\\\\\\\\n            </form>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\n/*\\\\\\\\n\\\\\\\\n*/\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/.eslintrc.cjs\\\\\\\": [\\\\n            \\\\\\\"module.exports = {\\\\\\\\n  root: true,\\\\\\\\n  env: { browser: true, es2020: true },\\\\\\\\n  extends: [\\\\\\\\n    'eslint:recommended',\\\\\\\\n    'plugin:react/recommended',\\\\\\\\n    'plugin:react/jsx-runtime',\\\\\\\\n    'plugin:react-hooks/recommended',\\\\\\\\n  ],\\\\\\\\n  i\",\n            \"gnorePatterns: ['dist', '.eslintrc.cjs'],\\\\\\\\n  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },\\\\\\\\n  settings: { react: { version: '18.2' } },\\\\\\\\n  plugins: ['react-refresh'],\\\\\\\\n  rules: {\\\\\\\\n    'react-refresh/only-export-components': [\\\\\\\\n      'warn',\\\\\\\\n      { allowConstantExpo\\\\\\\",\\\\n            \\\\\\\"rt: true },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n}\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/.prettierrc\\\\\\\": [\\\\n            \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"plugins\\\\\\\\\\\\\\\": [\\\\\\\\\\\\\\\"prettier-plugin-tailwindcss\\\\\\\\\\\\\\\"]\\\\\\\\n}\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n     \",\n            \"   \\\\\\\"my-store/README.md\\\\\\\": [\\\\n            \\\\\\\"# React + Vite\\\\\\\\n\\\\\\\\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\\\\\\\\n\\\\\\\\nCurrently, two official plugins are available:\\\\\\\\n\\\\\\\\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\\\\\\\\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast\",\n            \" Refresh\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/package.json\\\\\\\": [\\\\n            \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"my-store\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"private\\\\\\\\\\\\\\\": true,\\\\\\\\n  \\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"0.0.0\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"module\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"scripts\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"dev\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"vite\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"build\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"vite build\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"lint\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"vite preview\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"dependencies\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\",\n            \"\\\\\\\\\\\"@gsap/react\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^2.1.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"@reduxjs/toolkit\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^2.1.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"@stripe/stripe-js\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^3.0.3\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^1.6.5\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"flowbite-react\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^0.10.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"gsap\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^3.12.5\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"locomotive-scroll\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^5.0.0-\\\\\\\",\\\\n            \\\\\\\"beta.11\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"prettier\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^3.2.4\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"prettier-plugin-tailwindcss\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^0.5.11\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^18.2.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react-dom\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^18\",\n            \".2.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react-icons\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^5.0.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^9.1.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react-responsive-carousel\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^3.2.23\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react-router\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^6.21.3\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^6.21.3\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^10.0.5\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"shadcn-ui\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^0.8.0\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"devDependencies\\\\\\\\\\\\\\\": {\\\\\\\\n    \\\\\\\\\\\\\\\"@types/react\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^18.2.43\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"@types/react-dom\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^18.2.17\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"@vitejs/plugin-react\\\\\",\n            \"\\\\\\\\\\\": \\\\\\\\\\\\\\\"^4.2.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\",\\\\n            \\\\\\\"autoprefixer\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^10.4.16\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"eslint\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^8.55.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"eslint-plugin-react\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^7.33.2\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"eslint-plugin-react-hooks\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^4.6.0\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"eslint-plugin-react-refresh\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^0.4.5\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"postcss\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^8.4.33\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"tailwindcss\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^3.4.1\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"vite\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"^5.0.8\\\\\\\\\\\\\\\"\\\\\\\\n  },\\\\\\\\n  \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"This template provides a minimal setup to get React w\",\n            \"orking in Vite with HMR and some ESLint rules.\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"main\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"postcss.config.js\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"license\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"ISC\\\\\\\\\\\\\\\"\\\\\\\\n}\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/postcss.config.js\\\\\\\": [\\\\n            \\\\\\\"export default {\\\\\\\\n  plugins: {\\\\\\\\n    tailwindcss: {},\\\\\\\\n    autoprefixer: {},\\\\\\\\n  },\\\\\\\\n}\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/App.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { BrowserRouter as Router, Route, Routes } from \\\\\\\\\\\\\\\"react-ro\",\n            \"uter-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport {\\\\\\\\n    Home,\\\\\\\\n    ProductPage,\\\\\\\\n    LoginPage,\\\\\\\\n    RegisterPage,\\\\\\\\n    CategoryPage,\\\\\\\\n    CartPage,\\\\\\\\n    FailedPage,\\\\\\\\n    SuccessPage,\\\\\\\\n} from \\\\\\\\\\\\\\\"./pages\\\\\\\\\\\\\\\";\\\\\\\\nimport { Navbar, Footer } from \\\\\\\\\\\\\\\"./components\\\\\\\\\\\\\\\";\\\\\\\\nimport { useSelector } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport ScrollToTop from \\\\\\\\\\\\\\\"./components/ScrollToTop\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nexport default function App() {\\\\\\\\n    const user = useSelector((state) => state.auth.user);\\\\\\\\n\\\\\\\\n    return (\\\\\\\",\\\\n            \\\\\\\"\\\\\\\\n      \",\n            \"  <>\\\\\\\\n            <Router>\\\\\\\\n                <ScrollToTop />\\\\\\\\n                <Navbar user={user} />\\\\\\\\n                <Routes>\\\\\\\\n                    <Route path=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\" element={<Home />} />\\\\\\\\n                    <Route path=\\\\\\\\\\\\\\\"/product/:id\\\\\\\\\\\\\\\" element={<ProductPage />} />\\\\\\\\n                    <Route path=\\\\\\\\\\\\\\\"/products/:category\\\\\\\\\\\\\\\" element={<CategoryPage />} />\\\\\\\\n                    <Route path=\\\\\\\\\\\\\\\"/Login\\\\\\\\\\\\\\\" element={<LoginPage />} />\\\\\\\\n                    <Route path=\\\\\\\\\\\\\\\"/Register\\\\\\\\\\\\\\\" \",\n            \"element={<RegisterPage />} />\\\\\\\\n           \\\\\\\",\\\\n            \\\\\\\"         <Route path=\\\\\\\\\\\\\\\"/paymentSuccess\\\\\\\\\\\\\\\" element={<SuccessPage />} />\\\\\\\\n                    <Route path=\\\\\\\\\\\\\\\"/paymentFailed\\\\\\\\\\\\\\\" element={<FailedPage />} />\\\\\\\\n                    <Route path=\\\\\\\\\\\\\\\"/Cart\\\\\\\\\\\\\\\" element={user ? <CartPage /> : <Home />} />\\\\\\\\n                </Routes>\\\\\\\\n                <Footer />\\\\\\\\n            </Router>\\\\\\\\n        </>\\\\\\\\n    );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst AuthRoutes = () => (\\\\\\\\n    <>\\\\\\\\n        <Route path=\\\\\\\\\\\\\\\"/Login\\\\\\\\\\\\\\\" e\",\n            \"lement={<LoginPage />} />\\\\\\\\n        <Route path=\\\\\\\\\\\\\\\"/Register\\\\\\\\\\\\\\\" element={<RegisterPage />} />\\\\\\\\n    </>\\\\\\\\n);\\\\\\\\n\\\\\\\\n/*\\\\\\\\n  Imple\\\\\\\",\\\\n            \\\\\\\"ment the toast feature using the react toast library, also carry forward the functionality from the hero cards to the featured card to be added to the cart\\\\\\\\n\\\\\\\\n  as the navbar isnt sticky or fixed, either make it sticky and implement the toast\\\\\\\\n\\\\\\\\n  also using the toast use it for the authentication system too, for signalling\\\\\\\\n  if logged in succes\",\n            \"fully or not\\\\\\\\n\\\\\\\\n  \\\\\\\\n\\\\\\\\n*/\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/AuthLayout.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { Outlet } from \\\\\\\\\\\\\\\"react-router\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction AuthLayout() {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <Outlet />\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default AuthLayout;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/CatProductCard.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { FiPlusCircle } from \\\\\\\\\\\\\\\"react-icons/fi\\\\\\\\\\\\\\\";\\\\\\\\nimport { Li\",\n            \"nk } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst CatProductCard = ({category}) => {\\\\\\\\n  const _id = \\\\\\\\\\\\\\\"temp\\\\\\\\\\\\\\\";\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"prodcard  flex flex-col items-center \\\\\\\\\\\\\\\">\\\\\\\\n        <Link to={`/`}>\\\\\\\\n          <img\\\\\\\\n            src={`/${category}.png`}\\\\\\\\n            className=\\\\\\\\\\\\\\\"h-[35vh] w-[35vw] object-contain drop-shadow-[0_35px_35px_rgba(0,0,0,0.98)]\\\\\\\\\\\\\\\"\\\\\\\\n          />\\\\\\\\n        </Link>\\\\\\\\n        <h1 className=\\\\\\\\\\\\\\\"font-[Montser\\\\\\\",\\\\n            \\\\\\\"rat]\\\\\\\\\\\\\\\">Logi\",\n            \"tech G Pro</h1>\\\\\\\\n        <h2 className=\\\\\\\\\\\\\\\"text-[#72748e] \\\\\\\\\\\\\\\">Logitech</h2>\\\\\\\\n        <h1 className=\\\\\\\\\\\\\\\"font-[Montserrat] text-3xl text-[#676eff]\\\\\\\\\\\\\\\">$100</h1>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"browse my-2\\\\\\\\\\\\\\\">\\\\\\\\n          <button>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"flex items-center gap-2 font-[Montserrat]\\\\\\\\\\\\\\\">\\\\\\\\n              <FiPlusCircle className=\\\\\\\\\\\\\\\"text-2xl text-[#676eff]\\\\\\\\\\\\\\\" />\\\\\\\\n              <h1 className=\\\\\\\\\\\\\\\"text-l font-bold uppercase text-white\\\\\\\\\\\\\\\">\\\\\\\\n                Add to Cart\\\\\\\\n       \",\n            \"       </h1>\\\\\\\\n            </div>\\\\\\\\n          </\\\\\\\",\\\\n            \\\\\\\"button>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default CatProductCard;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/CatProductList.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport CatProductCard from \\\\\\\\\\\\\\\"./CatProductCard\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction CatProductList({ products }) {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\\\\\\\\\\\\\\\">\\\\\",\n            \"\\\\n      {products.map((product) => (\\\\\\\\n        <CatProductCard key={product.id} product={product} />\\\\\\\\n      ))}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default CatProductList;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/CategoriesCard.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { FiMinusCircle } from \\\\\\\\\\\\\\\"react-icons/fi\\\\\\\\\\\\\\\";\\\\\\\\nimport { Link } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst CategoriesCard = ({image, category, price}) => {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div cla\",\n            \"ssName=\\\\\\\\\\\\\\\"w-1/2 h-1/2 border-4 border-[#72748e] overflow-hidden relative shadow-2xl\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"back absolute top-[60%] -translate-y-1/2 -translate-x-7 font-[Montserrat] text-9xl text-[#72748e] opacity-15 select-none font-extrabold z-0\\\\\\\\\\\\\\\">\\\\\\\\n          <h1 className=\\\\\\\\\\\\\\\"uppercase\\\\\\\\\\\\\\\">{category}\\\\\\\",\\\\n            \\\\\\\"</h1>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"front h-full w-full flex justify-between\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"txt font-[Poppins] p-8 flex flex-c\",\n            \"ol gap-20\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"price\\\\\\\\\\\\\\\">\\\\\\\\n              <h3 className=\\\\\\\\\\\\\\\"text-[#72748e] text-l\\\\\\\\\\\\\\\">Starting From</h3>\\\\\\\\n              <h3 className=\\\\\\\\\\\\\\\"text-[#676eff] text-3xl font-bold font-[Montserrat]\\\\\\\\\\\\\\\">${price},-</h3>\\\\\\\\n            </div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"class\\\\\\\\\\\\\\\">\\\\\\\\n              <h1 className=\\\\\\\\\\\\\\\"font-extrabold text-white text-3xl\\\\\\\\\\\\\\\">{category}</h1>\\\\\\\",\\\\n            \\\\\\\"\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"browse my-10\\\\\\\\\\\\\\\">\\\\\\\\n                <Link to={`p\",\n            \"roducts/${category}`}>\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"flex items-center gap-2 font-[Montserrat]\\\\\\\\\\\\\\\">\\\\\\\\n                    <FiMinusCircle className=\\\\\\\\\\\\\\\"text-[#676eff] text-4xl\\\\\\\\\\\\\\\" />\\\\\\\\n                    <h1 className=\\\\\\\\\\\\\\\"uppercase text-white text-xl font-bold\\\\\\\\\\\\\\\">\\\\\\\\n                      Browse\\\\\\\\n                    </h1>\\\\\\\\n                  </div>\\\\\\\\n                </Link>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div\\\\\\\",\\\\n            \\\\\\\" className=\\\\\\\\\\\\\\\"\",\n            \"Image translate-x-20\\\\\\\\\\\\\\\">\\\\\\\\n            <img src={image} className=\\\\\\\\\\\\\\\"h-full w-full object-cover scale-150 drop-shadow-2xl\\\\\\\\\\\\\\\" />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default CategoriesCard;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/Featured.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { Carousel } from \\\\\\\\\\\\\\\"react-responsive-carousel\\\\\\\\\\\\\\\";\\\\\\\\nimport { FiPlusCircle } from \\\\\\\\\\\\\\\"react-icons/fi\\\\\\\\\\\\\\\";\\\\\\\\nimport FeaturedCard fro\",\n            \"m \\\\\\\\\\\\\\\"./FeaturedCard\\\\\\\\\\\\\\\";\\\\\\\\nconst Featured = ({ featuredCards }) => {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"relative h-screen w-full\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"backTxt absolute top-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748e] opacity-15\\\\\\\\\\\\\\\">\\\\\\\\n       \\\\\\\",\\\\n            \\\\\\\"   <h1>Featured</h1>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"card relative z-10 flex h-full w-fu\",\n            \"ll flex-shrink items-center justify-center text-white\\\\\\\\\\\\\\\">\\\\\\\\n          {featuredCards.map((card) => (\\\\\\\\n            <FeaturedCard key={card._id} card={card} />\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default Featured;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/FeaturedCard.jsx\\\\\\\": [\\\\n            \\\\\\\"import axios from \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\";\\\\\\\\nimport React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { FiPlusCircle } from \\\\\\\\\\\\\\\"react-icons/fi\\\\\\\\\\\\\\\";\\\\\\\\nimport { Link } from \\\\\\\\\\\\\\\"r\",\n            \"eact-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { AddToCart } from \\\\\\\\\\\\\\\"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport { useSelector, useDispatch } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport { toast } from \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst FeaturedCard = ({ card }) => {\\\\\\\\n  const dispatch = useDispatch();\\\\\\\\n\\\\\\\\n  const user = useSelector((state) => state.auth.user);\\\\\\\\n  const cart = useSelector((state) => state.auth.cart);\\\\\\\\n\\\\\\\\n  const { _id, produ\\\\\\\",\\\\n            \\\\\\\"ctImg, name, price, company } = card;\\\\\\\\n\\\\\\\\n  if (user) {\\\\\\\\n   \",\n            \" var Uid = user.user._id;\\\\\\\\n  }\\\\\\\\n  async function addToCart(productid, Uid) {\\\\\\\\n    if (user) {\\\\\\\\n      const response = await axios.post(`${import.meta.env.VITE_BACKEND_DOMAIN}/add-to-cart`, {\\\\\\\\n        productId: productid,\\\\\\\\n        userId: Uid,\\\\\\\\n      });\\\\\\\\n      const productDets = response.data;\\\\\\\\n      dispatch(AddToCart(productDets.data.items));\\\\\\\\n      toast.success(\\\\\\\\\\\\\\\"Item Added to cart\\\\\\\\\\\\\\\");\\\\\\\\n    } else {\\\\\\\\n      toast.error(\\\\\\\\\\\\\\\"Not Logged in, Please log in \\\\\\\",\\\\n            \\\\\\\"to a\",\n            \"dd items to cart\\\\\\\\\\\\\\\");\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {console.log(Uid)}\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"prodcard flex flex-col items-center \\\\\\\\\\\\\\\">\\\\\\\\n        <Link to={`/product/${_id}`}>\\\\\\\\n          <img\\\\\\\\n            src={productImg}\\\\\\\\n            className=\\\\\\\\\\\\\\\"h-[35vh] w-[35vw] object-contain drop-shadow-[0_35px_35px_rgba(0,0,0,0.98)]\\\\\\\\\\\\\\\"\\\\\\\\n          />\\\\\\\\n        </Link>\\\\\\\\n        <h1 className=\\\\\\\\\\\\\\\"font-[Montserrat]\\\\\\\\\\\\\\\">{name}</h1>\\\\\\\\n        <h2 className=\\\\\\\\\\\\\\\"text-[#72748e] \\\\\\\\\\\\\\\">{co\",\n            \"mpany}</h2>\\\\\\\\n        <h1 className=\\\\\\\\\\\\\\\"font-[Montserrat] \\\\\\\",\\\\n            \\\\\\\"text-3xl text-[#676eff]\\\\\\\\\\\\\\\">${price}</h1>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"browse my-2\\\\\\\\\\\\\\\">\\\\\\\\n          <button onClick={() => addToCart(_id, Uid)}>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"flex items-center gap-2 font-[Montserrat]\\\\\\\\\\\\\\\">\\\\\\\\n              <FiPlusCircle className=\\\\\\\\\\\\\\\"text-2xl text-[#676eff]\\\\\\\\\\\\\\\" />\\\\\\\\n              <h1 className=\\\\\\\\\\\\\\\"text-l font-bold uppercase text-white\\\\\\\\\\\\\\\">\\\\\\\\n                Add to Cart\\\\\\\\n              \",\n            \"</h1>\\\\\\\\n            </div>\\\\\\\\n          </button>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default FeaturedCard;\\\\\\\",\\\\n            \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/Footer.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { FaGithub, FaInstagram, FaTwitter } from \\\\\\\\\\\\\\\"react-icons/fa\\\\\\\\\\\\\\\";\\\\\\\\nimport { useLocation } from \\\\\\\\\\\\\\\"react-router\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst Footer = () => {\\\\\\\\n    const location = useLocation();\\\\\\\\n    if (location.pathname === \\\\\\\\\\\\\",\n            \"\\\"/Login\\\\\\\\\\\\\\\" || location.pathname === \\\\\\\\\\\\\\\"/Register\\\\\\\\\\\\\\\") {\\\\\\\\n        return null;\\\\\\\\n    }\\\\\\\\n    return (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"hidden lg:block\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"flex min-h-[40vh] w-full justify-between bg-[#111117] p-10 text-xl text-white\\\\\\\\\\\\\\\">\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"l\\\\\\\",\\\\n            \\\\\\\"inks flex gap-24 p-4\\\\\\\\\\\\\\\">\\\\\\\\n                    <ul className=\\\\\\\\\\\\\\\"list flex flex-col gap-4 text-2xl\\\\\\\\\\\\\\\">\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\">\\\\\\\\n                     \",\n            \"       <FaGithub />\\\\\\\\n                        </a>\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\">\\\\\\\\n                            <FaInstagram />\\\\\\\\n                        </a>\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\">\\\\\\\\n                            <FaTwitter />\\\\\\\\n                        </a>\\\\\\\\n                    </ul>\\\\\\\\n                    <ul className=\\\\\\\\\\\\\\\"list flex flex-col g\\\\\\\",\\\\n            \\\\\\\"ap-2\\\\\\\\\\\\\\\">\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\">Mouse</a>\\\\\\\\n                        <a href=\\\\\\\\\",\n            \"\\\\\\\"/\\\\\\\\\\\\\\\">Keyboards</a>\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\">Headsets</a>\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\">Mousepads</a>\\\\\\\\n                    </ul>\\\\\\\\n                    <ul className=\\\\\\\\\\\\\\\"flex flex-col gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">Register</a>\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">Login</a>\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">FAQs</a>\\\\\\\\n                        <a href=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">About</a>\\\\\\\\n                    </ul>\\\\\\\\n       \\\\\\\",\\\\n            \\\\\\\"\",\n            \"         </div>\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\">\\\\\\\\n                    <p className=\\\\\\\\\\\\\\\"text-l max-w-[30vw] text-[#72748e]\\\\\\\\\\\\\\\">\\\\\\\\n                        Test Card Details - 4000 0035 6000 0008\\\\\\\\n                        <br />\\\\\\\\n                        Any Valid Date, and random CVV number\\\\\\\\n                        <p>\\\\\\\\n                            Test Login Details: <br /> Username: Alex <br /> Password: Alex22\\\\\\\\n                        </p>\\\\\\\\n                    </p>\\\\\\\\n        \",\n            \"        </div>\\\\\\\\n            </div\\\\\\\",\\\\n            \\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"copyright flex h-[10vh] items-center justify-center  border-y border-[#72748e] bg-[#111117] px-10 text-white\\\\\\\\\\\\\\\">\\\\\\\\n                <p>Copyright&copy; 2023, All rights reserved </p>\\\\\\\\n            </div>\\\\\\\\n        </div>\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default Footer;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/HeroCard.jsx\\\\\\\": [\\\\n            \\\\\\\"import React, { useEffect, useRef } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport \",\n            \"{ CiCirclePlus } from \\\\\\\\\\\\\\\"react-icons/ci\\\\\\\\\\\\\\\";\\\\\\\\nimport { useSelector, useDispatch } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport axios from \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\";\\\\\\\\nimport { AddToCart } from \\\\\\\\\\\\\\\"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport { toast } from \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\";\\\\\\\\nimport { useGSAP } from \\\\\\\\\\\\\\\"@gsap/react\\\\\\\\\\\\\\\";\\\\\\\\nimport gsap from \\\\\\\\\\\\\\\"gsap\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst HeroCard = ({\\\\\\\\n    category,\\\\\\\\n    productImg,\\\\\\\\n    price,\\\\\\\\n    discountPrice,\\\\\\\\n    name,\\\\\\\\n    _id,\\\\\\\\n}) => {\\\\\\\\n    const mainRef = useRef(null);\\\\\\\\\",\n            \"n    useGSAP(() => \\\\\\\",\\\\n            \\\\\\\"{\\\\\\\\n        gsap.fromTo(\\\\\\\\n            \\\\\\\\\\\\\\\".Image\\\\\\\\\\\\\\\",\\\\\\\\n            {\\\\\\\\n                x: -10,\\\\\\\\n                opacity: 0,\\\\\\\\n            },\\\\\\\\n            { x: 0, opacity: 1, duration: 1, delay: 0.5 },\\\\\\\\n        );\\\\\\\\n\\\\\\\\n        gsap.to(\\\\\\\\\\\\\\\".categoryMask\\\\\\\\\\\\\\\", {\\\\\\\\n            y: -100,\\\\\\\\n            duration: 0.5,\\\\\\\\n            delay: 0.2,\\\\\\\\n        }),\\\\\\\\n            gsap.to(\\\\\\\\\\\\\\\".nameMask\\\\\\\\\\\\\\\", {\\\\\\\\n                // x: -400,\\\\\\\\n                opacity: 0,\\\\\\\\n \",\n            \"               duration: 0.9,\\\\\\\\n                delay: 1,\\\\\\\\n            }),\\\\\\\\n            gsap.fro\\\\\\\",\\\\n            \\\\\\\"mTo(\\\\\\\\n                \\\\\\\\\\\\\\\".backText\\\\\\\\\\\\\\\",\\\\\\\\n                {\\\\\\\\n                    x: -1000,\\\\\\\\n                    opacity: 0,\\\\\\\\n                },\\\\\\\\n                { x: -20, opacity: 0.25, duration: 1, delay: 1.2 },\\\\\\\\n            ),\\\\\\\\n            gsap.fromTo(\\\\\\\\n                \\\\\\\\\\\\\\\".prices\\\\\\\\\\\\\\\",\\\\\\\\n                {\\\\\\\\n                    // y: -100,\\\\\\\\n                    opacity: \",\n            \"0,\\\\\\\\n                },\\\\\\\\n                { opacity: 1, duration: 0.5, delay: 1, stagger: 0.1 },\\\\\\\\n            );\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    const dispatch = useDispatch();\\\\\\\\n\\\\\\\",\\\\n            \\\\\\\"    const user = useSelector((state) => state.auth.user);\\\\\\\\n\\\\\\\\n    if (user) {\\\\\\\\n        var Uid = user.user._id;\\\\\\\\n    }\\\\\\\\n    async function addToCart(productid, Uid) {\\\\\\\\n        if (user) {\\\\\\\\n            const response = await axios.post(\\\\\\\\n                `${import.meta.env.VITE_BACKEND_DOMAIN}/add-to-cart`,\\\\\",\n            \"\\\\n                {\\\\\\\\n                    productId: productid,\\\\\\\\n                    userId: Uid,\\\\\\\\n                },\\\\\\\\n            );\\\\\\\\n            const productDets = response.data;\\\\\\\\n            dispatch(AddToCa\\\\\\\",\\\\n            \\\\\\\"rt(productDets.data.items));\\\\\\\\n            toast.success(\\\\\\\\\\\\\\\"Item Added to cart\\\\\\\\\\\\\\\");\\\\\\\\n        } else {\\\\\\\\n            toast.error(\\\\\\\\\\\\\\\"Not Logged in, Please log in to add items to cart\\\\\\\\\\\\\\\");\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n    return (\\\\\\\\n        <>\\\\\\\\n            <div ref={ma\",\n            \"inRef} className=\\\\\\\\\\\\\\\"mainWrapper relative h-[85vh] w-full\\\\\\\\\\\\\\\">\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"backText absolute top-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748\\\\\\\",\\\\n            \\\\\\\"e] opacity-15\\\\\\\\\\\\\\\">\\\\\\\\n                    <h1>{category}</h1>\\\\\\\\n                </div>\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"front relative  z-10 flex h-[100%] w-full items-center justify-around font-[Poppins]\",\n            \"\\\\\\\\\\\\\\\">\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"Section-L flex h-full max-w-[30%] flex-col justify-evenly\\\\\\\\\\\\\\\">\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"prodName px-20 text-left text-7xl font-bold tracking-wider text-white\\\\\\\\\\\\\\\">\\\\\\\\n                            <h2 className=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">\\\\\\\\n                                <div className=\\\\\\\\\\\\\\\"\\\\\\\",\\\\n            \\\\\\\"categoryMask absolute h-20 w-1/4 bg-[#23232f]\\\\\\\\\\\\\\\"></div>\\\\\\\\n                                <div className=\\\\\\\\\\\\\\\"nameMask absolute z-0 h-[35vh] w-[\",\n            \"30%] bg-[#23232f]\\\\\\\\\\\\\\\"></div>\\\\\\\\n                                <span>{name}</span>\\\\\\\\n                            </h2>\\\\\\\\n                        </div>\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"price flex gap-8 px-20 text-5xl\\\\\\\\\\\\\\\">\\\\\\\\n                            <p className=\\\\\\\\\\\\\\\"prices font-bold text-[#72748e] line-through\\\\\\\\\\\\\\\">\\\\\\\\n                                ${price}\\\\\\\\n                 \\\\\\\",\\\\n            \\\\\\\"           </p>\\\\\\\\n                            <p className=\\\\\\\\\\\\\\\"prices font-bold text-[#6\",\n            \"76eff]\\\\\\\\\\\\\\\">\\\\\\\\n                                ${discountPrice}\\\\\\\\n                            </p>\\\\\\\\n                        </div>\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"w-fit px-20\\\\\\\\\\\\\\\">\\\\\\\\n                            <button\\\\\\\\n                                onClick={() => addToCart(_id, Uid)}\\\\\\\\n                                className=\\\\\\\\\\\\\\\"prices flex items-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n                            >\\\\\\\\n                                \\\\\\\",\\\\n            \\\\\\\"<div className=\\\\\\\\\\\\\\\"ATC-Btn text\",\n            \"-6xl text-[#676eff]\\\\\\\\\\\\\\\">\\\\\\\\n                                    <CiCirclePlus />\\\\\\\\n                                </div>\\\\\\\\n                                <div className=\\\\\\\\\\\\\\\"Cart font-[Montserrat] text-lg uppercase text-white\\\\\\\\\\\\\\\">\\\\\\\\n                                    Add to Cart\\\\\\\\n                                </div>\\\\\\\\n                            </button>\\\\\\\\n                        </div>\\\\\\\\n                    </div>\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"Image h-[90%] w-[45%]\\\\\\\\\\\\\\\">\\\\\\\\n      \",\n            \"       \\\\\\\",\\\\n            \\\\\\\"           <img\\\\\\\\n                            src={productImg}\\\\\\\\n                            alt=\\\\\\\\\\\\\\\"ProductImage\\\\\\\\\\\\\\\"\\\\\\\\n                            className=\\\\\\\\\\\\\\\"Image object-cover drop-shadow-[0_40px_40px_rgba(0,0,0,0.7)]\\\\\\\\\\\\\\\"\\\\\\\\n                        />\\\\\\\\n                    </div>\\\\\\\\n                </div>\\\\\\\\n            </div>\\\\\\\\n        </>\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default HeroCard;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/HeroProduct.jsx\\\\\\\": [\\\\n           \",\n            \" \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { Carousel } from \\\\\\\\\\\\\\\"react-responsive-carousel\\\\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\\\\"react-responsive-carousel/lib/styles/carousel.min.css\\\\\\\\\\\\\\\";\\\\\\\\nimport HeroCard from \\\\\\\\\\\\\\\"./HeroCard\\\\\\\\\\\\\\\";\\\\\\\\nimport { GrNext } from \\\\\\\\\\\\\\\"react-icons/gr\\\\\\\\\\\\\\\";\\\\\\\\nimport { GrPrevious } from \\\\\\\\\\\\\\\"react-icons/gr\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst HeroProduct = ({ cards }) => {\\\\\\\\n  const arrowStyles = {\\\\\\\\n    position: \\\\\\\\\\\\\\\"absolute\\\\\\\\\\\\\\\",\\\\\\\\n    top: \\\\\\\\\\\\\\\"50%\\\\\\\\\\\\\\\",\\\\\\\\n    transform: \\\\\\\\\\\\\\\"translateY(-50%)\\\\\\\\\\\\\\\",\\\\\\\\n    zIndex: 2,\",\n            \"\\\\\\\\n  };\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      {console.log(cards)}\\\\\\\\n      <Carousel\\\\\\\\n        showSt\\\\\\\",\\\\n            \\\\\\\"atus={false}\\\\\\\\n        renderArrowPrev={(onClickHandler, hasPrev, label) =>\\\\\\\\n          hasPrev && (\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={onClickHandler}\\\\\\\\n              title={label}\\\\\\\\n              style={{ ...arrowStyles, right: 0, top: \\\\\\\\\\\\\\\"40%\\\\\\\\\\\\\\\" }}\\\\\\\\n            >\\\\\\\\n              <GrPrevious className=\\\\\\\\\\\\\\\"mx-5 text-5xl text-[#72748e] \",\n            \"transition-all hover:scale-125\\\\\\\\\\\\\\\" />\\\\\\\\n            </button>\\\\\\\\n          )\\\\\\\\n        }\\\\\\\\n        renderArrowNext={(onClickHandler, hasNext, label) =>\\\\\\\\n     \\\\\\\",\\\\n            \\\\\\\"     hasNext && (\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={onClickHandler}\\\\\\\\n              title={label}\\\\\\\\n              style={{ ...arrowStyles, right: 0 }}\\\\\\\\n            >\\\\\\\\n              <GrNext className=\\\\\\\\\\\\\\\"mx-5 text-5xl text-[#72748e] transition-all hover:scale-125\\\\\\\\\\\\\\\" />\\\\\\\\n\",\n            \"            </button>\\\\\\\\n          )\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {cards.map((card, index) => (\\\\\\\\n          <HeroCard key={index} {...card} />\\\\\\\\n        ))}\\\\\\\\n      </Carousel>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default HeroProd\\\\\\\",\\\\n            \\\\\\\"uct;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/MobileLoader.jsx\\\\\\\": [\\\\n            \\\\\\\"const MobileLoader = () => {\\\\\\\\n    return (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\" lg:hidden absolute left-0 top-0 z-50 flex h-[100vh] w-[100vw] items-center justify-c\",\n            \"enter bg-zinc-900 p-10 text-center text-2xl font-[Montserrat] font-bold uppercase text-white\\\\\\\\\\\\\\\">\\\\\\\\n            <h1>\\\\\\\\n                \\\\\\\\\\\\\\\"We suggest you to checkout{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"bg-[#676eff] p-1\\\\\\\\\\\\\\\">GearUP</span> on a\\\\\\\\n                Desktop for better experience.\\\\\\\\\\\\\\\"\\\\\\\\n            </h1>\\\\\\\\n        </div>\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default MobileLoade\\\\\\\",\\\\n            \\\\\\\"r;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/Navbar.jsx\\\\\\\": [\\\\n            \\\\\\\"impor\",\n            \"t React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { Link, useLocation } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { useSelector } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport { FaShoppingCart } from \\\\\\\\\\\\\\\"react-icons/fa\\\\\\\\\\\\\\\";\\\\\\\\nimport { useGSAP } from \\\\\\\\\\\\\\\"@gsap/react\\\\\\\\\\\\\\\";\\\\\\\\nimport gsap from \\\\\\\\\\\\\\\"gsap\\\\\\\\\\\\\\\";\\\\\\\\nimport { Button } from \\\\\\\\\\\\\\\"flowbite-react\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst Navbar = () => {\\\\\\\\n    useGSAP(() => {\\\\\\\\n        gsap.from(\\\\\\\\\\\\\\\".LeftLinks\\\\\\\\\\\\\\\", {\\\\\\\\n            y: -50,\\\\\\\\n            opacity: 0,\\\\\\\\n            duration: 0.5,\\\\\\\\n  \",\n            \"          stagger: 0.2,\\\\\\\\n            ease: \\\\\\\\\\\\\\\"power1\\\\\\\\\\\\\\\",\\\\\\\\n            delay: \\\\\\\",\\\\n            \\\\\\\"2,\\\\\\\\n        });\\\\\\\\n        gsap.from(\\\\\\\\\\\\\\\".rightLinks\\\\\\\\\\\\\\\", {\\\\\\\\n            y: -50,\\\\\\\\n            opacity: 0,\\\\\\\\n            duration: 0.5,\\\\\\\\n            delay: 2,\\\\\\\\n            stagger: 0.2,\\\\\\\\n            ease: \\\\\\\\\\\\\\\"power1\\\\\\\\\\\\\\\",\\\\\\\\n        });\\\\\\\\n    });\\\\\\\\n    const location = useLocation();\\\\\\\\n    const user = useSelector((state) => state.auth.user);\\\\\\\\n    const cart = useSelector((state) => state.auth.\",\n            \"cart);\\\\\\\\n\\\\\\\\n    if (location.pathname === \\\\\\\\\\\\\\\"/Login\\\\\\\\\\\\\\\" || location.pathname === \\\\\\\\\\\\\\\"/Register\\\\\\\\\\\\\\\") {\\\\\\\\n        return null;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    return (\\\\\\\\n        <d\\\\\\\",\\\\n            \\\\\\\"iv className=\\\\\\\\\\\\\\\"hidden lg:block\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"flex h-[15vh] w-full items-center justify-between bg-[#23232f] p-12 font-[Poppins] text-white\\\\\\\\\\\\\\\">\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"left flex\\\\\\\\\\\\\\\">\\\\\\\\n                    <Link to=\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\">\\\\\\\\n                        <img\\\\\\\\n                    \",\n            \"        src=\\\\\\\\\\\\\\\"/Logo.png\\\\\\\\\\\\\\\"\\\\\\\\n                            alt=\\\\\\\\\\\\\\\"logo\\\\\\\\\\\\\\\"\\\\\\\\n                            className=\\\\\\\\\\\\\\\"LeftLinks h-16 w-16 object-cover invert\\\\\\\\\\\\\\\"\\\\\\\\n                        />\\\\\\\\n                    </Link>\\\\\\\\n                   \\\\\\\",\\\\n            \\\\\\\" <ul className=\\\\\\\\\\\\\\\" mx-16 flex items-center gap-14\\\\\\\\\\\\\\\">\\\\\\\\n                        <Link className=\\\\\\\\\\\\\\\"LeftLinks\\\\\\\\\\\\\\\" to={`/products/Mouse`}>\\\\\\\\n                            Mouse\\\\\\\\n                        </Link>\\\\\\\\n                        \",\n            \"<Link className=\\\\\\\\\\\\\\\"LeftLinks\\\\\\\\\\\\\\\" to={`/products/Keyboard`}>\\\\\\\\n                            Keyboard\\\\\\\\n                        </Link>\\\\\\\\n                        <Link className=\\\\\\\\\\\\\\\"LeftLinks\\\\\\\\\\\\\\\" to={`/products/Headset`}>\\\\\\\\n                            Headset\\\\\\\\n                        </Link>\\\\\\\\n              \\\\\\\",\\\\n            \\\\\\\"          <Link className=\\\\\\\\\\\\\\\"LeftLinks\\\\\\\\\\\\\\\" to={`/products/Mousepad`}>\\\\\\\\n                            Mousepad\\\\\\\\n                        </Link>\\\\\\\\n                    </ul>\\\\\\\\\",\n            \"n                </div>\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"Right flex\\\\\\\\\\\\\\\">\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"Profile mx-16 flex items-center gap-5\\\\\\\\\\\\\\\">\\\\\\\\n                        {user ? (\\\\\\\\n                            <h1>{user.user.username}</h1>\\\\\\\\n                        ) : (\\\\\\\\n                            <Link to=\\\\\\\\\\\\\\\"/Login\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"rightLinks\\\\\\\\\\\\\\\">\\\\\\\\n    \\\\\\\",\\\\n            \\\\\\\"                            <Button color={\\\\\\\\\\\\\\\"purple\\\\\\\\\\\\\\\"}>Login</Button>\\\\\\\\n                          \",\n            \"  </Link>\\\\\\\\n                            //className=\\\\\\\\\\\\\\\"rightLinks border-3 border-white rounded-3xl p-2\\\\\\\\\\\\\\\"\\\\\\\\n                        )}\\\\\\\\n                    </div>\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"cart mt-16 flex flex-grow flex-col gap-10\\\\\\\\\\\\\\\">\\\\\\\\n                        <Link className=\\\\\\\\\\\\\\\"rightLinks\\\\\\\\\\\\\\\" to=\\\\\\\\\\\\\\\"/Cart\\\\\\\\\\\\\\\">\\\\\\\\n                            <div className=\\\\\\\\\\\\\\\"text-3xl text-[#676eff]\\\\\\\\\\\\\\\">\\\\\\\\n                                <FaS\\\\\\\",\\\\n            \\\\\\\"hoppingCart />\\\\\\\\n              \",\n            \"              </div>\\\\\\\\n                        </Link>\\\\\\\\n\\\\\\\\n                        <div>\\\\\\\\n                            {user ? (\\\\\\\\n                                <p className=\\\\\\\\\\\\\\\"rightLinks rotate-90 font-[Poppins] text-lg uppercase\\\\\\\\\\\\\\\">\\\\\\\\n                                    ${cart.totalPrice}\\\\\\\\n                                </p>\\\\\\\\n                            ) : (\\\\\\\\n                                <p className=\\\\\\\\\\\\\\\"rightLinks rotate-90 font-[Poppins] text-lg uppercase\\\\\\\\\\\\\\\">\\\\\\\\n                \",\n            \"   \\\\\\\",\\\\n            \\\\\\\"                 $0\\\\\\\\n                                </p>\\\\\\\\n                            )}\\\\\\\\n                        </div>\\\\\\\\n                    </div>\\\\\\\\n                </div>\\\\\\\\n            </div>\\\\\\\\n        </div>\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default Navbar;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/PaymentFailCard.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { Link } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst PaymentFailCard = () => {\\\\\\\\n  retu\",\n            \"rn (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"flex min-h-screen items-center justify-center bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"max-w-lg rounded-lg bg-[#72748e] p-6 shadow-lg\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"text-center font-[Poppins]\\\\\\\\\\\\\\\">\\\\\\\\n          <img\\\\\\\\n            src={`/failure.svg`}\\\\\\\\n            alt=\\\\\\\\\\\\\\\"Payment Successful\\\\\\\\\\\\\\\"\\\\\\\\n            className=\\\\\\\\\\\\\\\"mx-auto h-16 w-16\\\\\\\\\\\\\\\"\\\\\\\\n          />\\\\\\\\n          <h2 className=\\\\\\\\\\\\\\\"mt-4 text-3xl font\\\\\\\",\\\\n            \\\\\\\"-bold\\\\\\\\\\\\\\\">Payment Failed!</h2>\\\\\\\\n    \",\n            \"      <p className=\\\\\\\\\\\\\\\"mb-8 mt-2 text-gray-800 text-xl\\\\\\\\\\\\\\\">\\\\\\\\n            Something went wrong with your payment, Please try again...\\\\\\\\n          </p>\\\\\\\\n          <Link\\\\\\\\n            className=\\\\\\\\\\\\\\\"rounded bg-[#676eff] px-4 py-2 text-white text-xl transition hover:bg-purple-700\\\\\\\\\\\\\\\"\\\\\\\\n            to={\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\"}\\\\\\\\n          >\\\\\\\\n            Continue to Shop\\\\\\\\n          </Link>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default PaymentFailCard;\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-st\",\n            \"ore/src/components/PaymentSuccessCard.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { Link } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst PaymentSuccessCard = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"flex min-h-screen items-center justify-center bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"max-w-lg rounded-lg bg-[#72748e] p-6 shadow-lg\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"text-center font-[Poppins]\\\\\\\\\\\\\\\">\\\\\\\\n          <img\\\\\\\\n            src={`/success.svg`}\\\\\\\\n            alt=\\\\\\\\\\\\\\\"\",\n            \"Payment Successful\\\\\\\\\\\\\\\"\\\\\\\\n            className=\\\\\\\\\\\\\\\"mx-auto h-16 w-16\\\\\\\\\\\\\\\"\\\\\\\\n          />\\\\\\\\n          <h2 className=\\\\\\\\\\\\\\\"mt-4 text-3xl f\\\\\\\",\\\\n            \\\\\\\"ont-bold\\\\\\\\\\\\\\\">Payment Successful!</h2>\\\\\\\\n          <p className=\\\\\\\\\\\\\\\"mb-8 mt-2 text-gray-800 text-xl\\\\\\\\\\\\\\\">\\\\\\\\n            Thank you for your purchase. Your payment has been successfully\\\\\\\\n            processed.\\\\\\\\n          </p>\\\\\\\\n          <Link\\\\\\\\n            className=\\\\\\\\\\\\\\\"rounded bg-[#676eff] px-4 py-2 text-white text-xl transition hover:bg-purple-7\",\n            \"00\\\\\\\\\\\\\\\"\\\\\\\\n            to={\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\"}\\\\\\\\n          >\\\\\\\\n            Continue to Shop\\\\\\\\n          </Link>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default PaymentSuccessCard;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/ProductCard.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { MdExpandMore } from \\\\\\\\\\\\\\\"react-icons/md\\\\\\\\\\\\\\\";\\\\\\\\nimport { CiCirclePlus } from \\\\\\\\\\\\\\\"react-icons/ci\\\\\\\\\\\\\\\";\\\\\\\\nimport { useDispatch, useSelector } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimpor\",\n            \"t { AddToCart } from \\\\\\\\\\\\\\\"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport { toast } from \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\";\\\\\\\\nimport axios from \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\";\\\\\\\\nfunction ProductCard({ productData }) {\\\\\\\\n  const dispatch = useDispatch();\\\\\\\\n\\\\\\\\n  const { _id, name, company, price, discountPrice, productImg } = productData;\\\\\\\\n\\\\\\\\n  const user = useSelector((state) => state.\\\\\\\",\\\\n            \\\\\\\"auth.user);\\\\\\\\n\\\\\\\\n  if (user) {\\\\\\\\n    var Uid = user.user._id;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  async function addToCart(productid, Uid) {\\\\\\\\n    if (u\",\n            \"ser) {\\\\\\\\n      const response = await axios.post(\\\\\\\\n        `${import.meta.env.VITE_BACKEND_DOMAIN}/add-to-cart`,\\\\\\\\n        {\\\\\\\\n          productId: productid,\\\\\\\\n          userId: Uid,\\\\\\\\n        },\\\\\\\\n      );\\\\\\\\n      const productDets = response.data;\\\\\\\\n      dispatch(AddToCart(productDets.data.items));\\\\\\\\n      toast.success(\\\\\\\\\\\\\\\"Item Added to cart\\\\\\\\\\\\\\\");\\\\\\\\n    } else {\\\\\\\\n      toast.error(\\\\\\\\\\\\\\\"Not Logged in, Please l\\\\\\\",\\\\n            \\\\\\\"og in to add items to cart\\\\\\\\\\\\\\\");\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return (\\\\\",\n            \"\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"relative h-[85vh] w-full\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"backText absolute top-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748e] opacity-15\\\\\\\\\\\\\\\">\\\\\\\\n          <h1>{company}</h1>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"front relative  z-10 flex h-[100%] w-full items-center justify-around font-[Poppins]\\\\\\\\\\\\\\\">\\\\\\\\n          <div classNam\\\\\\\",\\\\n            \\\\\\\"e\",\n            \"=\\\\\\\\\\\\\\\"Section-L flex h-full max-w-[30%] flex-col justify-evenly\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"prodName px-20 text-left text-7xl font-bold text-white\\\\\\\\\\\\\\\">\\\\\\\\n              <h2>{name}</h2>\\\\\\\\n            </div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"price flex gap-8 px-20 text-5xl\\\\\\\\\\\\\\\">\\\\\\\\n              <p className=\\\\\\\\\\\\\\\"font-bold text-[#72748e] line-through\\\\\\\\\\\\\\\">${price}</p>\\\\\\\\n              <p className=\\\\\\\\\\\\\\\"font-bold text-[#676eff]\\\\\\\\\\\\\\\">${discountPrice}</p>\\\\\\\\n            </div>\\\\\\\\n            <button\\\\\\\\n\",\n            \"              onClick={() => addToCart(_id, Uid\\\\\\\",\\\\n            \\\\\\\")}\\\\\\\\n              className=\\\\\\\\\\\\\\\"flex items-center gap-4 px-20\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"text-6xl text-[#676eff]\\\\\\\\\\\\\\\">\\\\\\\\n                <CiCirclePlus />\\\\\\\\n              </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"font-[Montserrat] text-lg uppercase text-white\\\\\\\\\\\\\\\">\\\\\\\\n                Add to Cart\\\\\\\\n              </div>\\\\\\\\n            </button>\\\\\\\\n            <div>\\\\\\\\n              <a\\\\\\\\n                href=\\\\\\\\\\\\\",\n            \"\\\"#Details\\\\\\\\\\\\\\\"\\\\\\\\n                className=\\\\\\\\\\\\\\\"absolute bottom-1 left-1/2 -translate-x-1/2 text-8xl text-[#676eff] \\\\\\\\\\\\\\\"\\\\\\\\n   \\\\\\\",\\\\n            \\\\\\\"           >\\\\\\\\n                <MdExpandMore className=\\\\\\\\\\\\\\\"transition-all ease-in-out hover:scale-125\\\\\\\\\\\\\\\" />\\\\\\\\n              </a>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"Image h-[90%] w-[45%]\\\\\\\\\\\\\\\">\\\\\\\\n            <img\\\\\\\\n              src={productImg}\\\\\\\\n              alt=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"object-cover dr\",\n            \"op-shadow-[0_35px_35px_rgba(0,0,0,0.25)]\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default ProductCard;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/ProductDetails.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction ProductDetails({ details }) {\\\\\\\\n  const { name, productImg } = details;\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex justify-between p-14 h-screen\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"detai\",\n            \"ls min-w-[45vw] p-8\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"heading text-3xl text-white font-[Poppins] uppercase \\\\\\\\\\\\\\\">\\\\\\\\n            <h1>{name}</h1>\\\\\\\\n            <hr className=\\\\\\\\\\\\\\\"mt-7 border-t-4 rounded border-[#72748e]\\\\\\\\\\\\\\\" />\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"content mt-10 text-[#d1d1db]\\\\\\\\\\\\\\\">\\\\\\\\n         \\\\\\\",\\\\n            \\\\\\\"   <ul className=\\\\\\\\\\\\\\\"list-disc flex flex-col gap-5 text-xl\\\\\\\\\\\\\\\">\\\\\\\\n              <li>Ultra-lightweight design for fast and precise movements</li>\\\\\\\\n              \",\n            \"<li>\\\\\\\\n                HERO sensor with 25,600 DPI sensitivity for exceptional accuracy\\\\\\\\n              </li>\\\\\\\\n              <li>\\\\\\\\n                Zero-additive PTFE feet for smooth gliding across any surface\\\\\\\\n              </li>\\\\\\\\n              <li>\\\\\\\\n                Ambidextrous shape with customizable side buttons for versatile\\\\\\\\n                use\\\\\\\\n       \\\\\\\",\\\\n            \\\\\\\"       </li>\\\\\\\\n              <li>\\\\\\\\n                LIGHTSPEED wireless technology ensures lag-free performance\\\\\\\\n\",\n            \"              </li>\\\\\\\\n              <li> 70-hour battery life for extended gaming sessions</li>\\\\\\\\n              <li>\\\\\\\\n                Mechanical button tensioning system for crisp and reliable\\\\\\\\n                clicks\\\\\\\\n              </li>\\\\\\\\n              <li>Onboard memory to save your preferred settings</li>\\\\\\\\n              <li>\\\\\\\\n                Sleek and minimalistic design with customizable RGB ligh\\\\\\\",\\\\n            \\\\\\\"ting\\\\\\\\n                Ideal for competitive gaming and esports professio\",\n            \"nals.\\\\\\\\n              </li>\\\\\\\\n            </ul>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"image w-[35vw] flex items-center\\\\\\\\\\\\\\\">\\\\\\\\n          <img src={productImg} className=\\\\\\\\\\\\\\\" object-cover h-[90%] w-full\\\\\\\\\\\\\\\" />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default ProductDetails;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/ScrollToTop.jsx\\\\\\\": [\\\\n            \\\\\\\"import React, { useEffect } from 'react';\\\\\\\\nimport { useLocation } from 'react-router-do\",\n            \"m';\\\\\\\\n\\\\\\\\nconst ScrollToTop = () => {\\\\\\\\n  const { pathname } = useLocation();\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    window.scrollTo(0, 0); // Scroll to the top of the page on route change\\\\\\\\n  }, [pathname]);\\\\\\\\n\\\\\\\\n  return null; // This component doesn't render anything in the DOM\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default ScrollToTop;\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/components/index.js\\\\\\\": [\\\\n            \\\\\\\"export {default as Navbar} from './Navbar'\\\\\\\\nexport {default as Footer} from './Footer'\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n     \",\n            \"   \\\\\\\"my-store/src/features/auth/authActions.js\\\\\\\": [\\\\n            \\\\\\\"import { createAsyncThunk } from \\\\\\\\\\\\\\\"@reduxjs/toolkit\\\\\\\\\\\\\\\";\\\\\\\\nimport { loginSuccess} from \\\\\\\\\\\\\\\"./authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport axios from \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst loginUser = createAsyncThunk(\\\\\\\\n  \\\\\\\\\\\\\\\"auth/login\\\\\\\\\\\\\\\",\\\\\\\\n  async (userData, { dispatch, rejectWithValue }) => {\\\\\\\\n    const { username, password } = userData;\\\\\\\\n    try {\\\\\\\\n      const response = await axios.post(`${import.meta.env.VITE_BACKEND_DOMAIN}/login`, {\\\\\\\\n        usern\",\n            \"ame,\\\\\\\\n        password,\\\\\\\\n      });\\\\\\\\n      const user = response.data;\\\\\\\\n      dispatch(loginSuccess(user));\\\\\\\\n      re\\\\\\\",\\\\n            \\\\\\\"turn user;\\\\\\\\n    } catch (error) {\\\\\\\\n      return rejectWithValue(error.response.data);\\\\\\\\n    }\\\\\\\\n  },\\\\\\\\n);\\\\\\\\n\\\\\\\\n\\\\\\\\n\\\\\\\\nexport { loginUser };\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/features/auth/authSlice.js\\\\\\\": [\\\\n            \\\\\\\"import { createSlice } from \\\\\\\\\\\\\\\"@reduxjs/toolkit\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst authSlice = createSlice({\\\\\\\\n  name: \\\\\\\\\\\\\\\"auth\\\\\\\\\\\\\\\",\\\\\\\\n  initialState\",\n            \": {\\\\\\\\n    isAuthenticated: false,\\\\\\\\n    user: null,\\\\\\\\n    cart: {\\\\\\\\n      items: [],\\\\\\\\n      totalPrice: 0,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  reducers: {\\\\\\\\n    loginSuccess(state, action) {\\\\\\\\n      state.isAuthenticated = true;\\\\\\\\n      state.user = action.payload;\\\\\\\\n      state.cart = action.payload.user.cart;\\\\\\\\n    },\\\\\\\\n    logoutSuccess(state) {\\\\\\\\n      state.isAuthenticated = false;\\\\\\\\n      state.user = null;\\\\\\\\n      state.cart = \\\\\\\",\\\\n            \\\\\\\"{\\\\\\\\n        items: [],\\\\\\\\n        totalPrice: 0,\\\\\\\\n      };\",\n            \"\\\\\\\\n    },\\\\\\\\n    GoogleLoginSuccess(state) {\\\\\\\\n      state.isAuthenticated = true;\\\\\\\\n    },\\\\\\\\n    AddToCart(state, action) {\\\\\\\\n      const productsToAdd = action.payload;\\\\\\\\n      productsToAdd.forEach(({ product, quantity }) => {\\\\\\\\n        const existingItemIndex = state.cart.items.findIndex(\\\\\\\\n          (item) => item.product._id === product._id,\\\\\\\\n        );\\\\\\\\n\\\\\\\\n        if (existingItemIndex !== -1) {\\\\\\\\n          state.cart.items[existingItemIndex].quantity += 1;\\\\\\\\n    \\\\\\\",\\\\n            \\\\\\\"    }\",\n            \" else {\\\\\\\\n          state.cart.items.push({ product, quantity });\\\\\\\\n        }\\\\\\\\n\\\\\\\\n        state.cart.totalPrice = state.cart.items.reduce((total, item) => {\\\\\\\\n          return total + item.product.discountPrice * item.quantity;\\\\\\\\n        }, 0);\\\\\\\\n      });\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    RemoveFromCart(state, action) {\\\\\\\\n      const productToRemoveId = action.payload;\\\\\\\\n      const productIndex = state.cart.items.findIndex(\\\\\\\\n        (item) => item.product == productToRemoveId,\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      state.ca\",\n            \"rt.items = state.cart.items\\\\\\\",\\\\n            \\\\\\\".filter(\\\\\\\\n        (item) => item.product !== productToRemoveId,\\\\\\\\n      );\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    increaseQuantity(state, action) {\\\\\\\\n      const itemId = action.payload;\\\\\\\\n      const itemIndex = state.cart.items.findIndex(\\\\\\\\n        (item) => item._id == itemId,\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      state.cart.items[itemIndex].quantity += 1;\\\\\\\\n\\\\\\\\n      state.cart.totalPrice = state.cart.items.reduce((total, item) => {\\\\\\\\n        return total + item.product.discountPric\",\n            \"e * item.quantity;\\\\\\\\n      }, 0);\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    decreaseQuantity(state, action\\\\\\\",\\\\n            \\\\\\\") {\\\\\\\\n      const itemId = action.payload;\\\\\\\\n      const itemIndex = state.cart.items.findIndex(\\\\\\\\n        (item) => item._id == itemId,\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      state.cart.items[itemIndex].quantity -= 1;\\\\\\\\n\\\\\\\\n      state.cart.totalPrice = state.cart.items.reduce((total, item) => {\\\\\\\\n        return total + item.product.discountPrice * item.quantity;\\\\\\\\n      }, 0);\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n});\\\\\\\\n\\\\\\\\nexport c\",\n            \"onst {\\\\\\\\n  loginSuccess,\\\\\\\\n  logoutSuccess,\\\\\\\\n  GoogleLoginSuccess,\\\\\\\\n  AddToCart,\\\\\\\\n  RemoveFromCart,\\\\\\\\n  increaseQuantity,\\\\\\\\n  decreaseQuantity\\\\\\\",\\\\n            \\\\\\\",\\\\\\\\n} = authSlice.actions;\\\\\\\\nexport default authSlice.reducer;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/index.css\\\\\\\": [\\\\n            \\\\\\\"@import \\\\\\\\\\\\\\\"tailwindcss/base\\\\\\\\\\\\\\\";\\\\\\\\n@import \\\\\\\\\\\\\\\"tailwindcss/components\\\\\\\\\\\\\\\";\\\\\\\\n@import \\\\\\\\\\\\\\\"tailwindcss/utilities\\\\\\\\\\\\\\\";\\\\\\\\n@import url(\\\\\\\\\\\\\\\"https://fonts.googleapis.com/css2?family=Poppins&display=swap\\\\\\\\\\\\\\\");\",\n            \"\\\\\\\\n/*Font family: Poppins;*/\\\\\\\\n@import url(\\\\\\\\\\\\\\\"https://fonts.googleapis.com/css2?family=Oswald:wght@700&display=swap\\\\\\\\\\\\\\\");\\\\\\\\n/*Font family: Oswald;*/\\\\\\\\n@import url(\\\\\\\\\\\\\\\"https://fonts.googleapis.com/css2?family=Montserrat:wght@700&display=swap\\\\\\\\\\\\\\\");\\\\\\\\n/*Font family: Montserrat;*/\\\\\\\\n\\\\\\\\n/*Color Pallete:\\\\\\\\n    #676eff(Purple)\\\\\\\\n    #fff(White)\\\\\\\\n    #72748e(Light\\\\\\\",\\\\n            \\\\\\\" Grey)\\\\\\\\n    #23232f(Dark Grey BG)\\\\\\\\n*/\\\\\\\\n\\\\\\\\nhtml {\\\\\\\\n  scroll-behavior: smooth;\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* For WebKit browsers (Chrome,\",\n            \" Safari) */\\\\\\\\n::-webkit-scrollbar {\\\\\\\\n  width: 12px; /* Set the width of the scrollbar */\\\\\\\\n}\\\\\\\\n\\\\\\\\n::-webkit-scrollbar-track {\\\\\\\\n  background-color: #f1f1f1; /* Set the background color of the track */\\\\\\\\n}\\\\\\\\n\\\\\\\\n::-webkit-scrollbar-thumb {\\\\\\\\n  background-color: #888; /* Set the color of the thumb */\\\\\\\\n  border-radius: 6px; /* Round the corners of the thumb */\\\\\\\\n}\\\\\\\\n\\\\\\\\n::-webkit-scrollbar-thumb:hover {\\\\\\\\n  background-color:\\\\\\\",\\\\n            \\\\\\\" #555; /* Change the thumb color on hover */\\\\\\\\n}\\\\\\\\n* {\\\\\\\\\",\n            \"n  scrollbar-color: #888 #1d1c1c; /* Set the thumb and track colors */\\\\\\\\n  scrollbar-width: thin; /* Set the width of the scrollbar */\\\\\\\\n}\\\\\\\\n\\\\\\\\n\\\\\\\\nbody {\\\\\\\\n  scrollbar-color: #888 #171717;\\\\\\\\n}\\\\\\\\n\\\\\\\\n\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/main.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport ReactDOM from \\\\\\\\\\\\\\\"react-dom/client\\\\\\\\\\\\\\\";\\\\\\\\nimport App from \\\\\\\\\\\\\\\"./App\\\\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\\\\"./index.css\\\\\\\\\\\\\\\";\\\\\\\\nimport { Provider } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport store from \\\\\\\\\\\\\\\"./store/Store\\\\\",\n            \"\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nReactDOM.createRoot(document.getElementById(\\\\\\\\\\\\\\\"root\\\\\\\\\\\\\\\")).render(\\\\\\\\n  <React.StrictMode>\\\\\\\\n    <Provider store={store}>\\\\\\\\n      <App />\\\\\\\\n    </Provider>\\\\\\\\n  </React.StrictMode>,\\\\\\\\n);\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/CartPage.jsx\\\\\\\": [\\\\n            \\\\\\\"import React, { useEffect, useState } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { useDispatch, useSelector } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport {\\\\\\\\n  AddToCart,\\\\\\\\n  RemoveFromCart,\\\\\\\\n  decreaseQuantity,\\\\\\\\n  increaseQuantity,\\\\\\\\n} from \\\\\\\\\\\\\\\"\",\n            \"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport { loadStripe } from \\\\\\\\\\\\\\\"@stripe/stripe-js\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nimport { IoMdAddCircleOutline } from \\\\\\\\\\\\\\\"react-icons/io\\\\\\\\\\\\\\\";\\\\\\\\nimport { IoRemoveCircleOutline } from \\\\\\\\\\\\\\\"react-icons/io5\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction CartPage() {\\\\\\\\n  const dispatch = useDispatch();\\\\\\\\n  const Cart = useSelector((state) => state.auth.cart);\\\\\\\\n \\\\\\\",\\\\n            \\\\\\\" const { items } = Cart;\\\\\\\\n\\\\\\\\n  const handleIncreaseQuantity = (id) => {\\\\\\\\n    dispatch(increaseQuantity(id));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const handleD\",\n            \"ecreaseQuantity = (id) => {\\\\\\\\n    dispatch(decreaseQuantity(id));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const redirectPayment = async () => {\\\\\\\\n    const stripe = await loadStripe(import.meta.env.VITE_STRIPE_TEST_KEY);\\\\\\\\n\\\\\\\\n    const body = {\\\\\\\\n      products: items,\\\\\\\\n    };\\\\\\\\n\\\\\\\\n    const response = await fetch(\\\\\\\\n      `${import.meta.env.VITE_BACKEND_DOMAIN}/create-checkout-session`,\\\\\\\\n      {\\\\\\\\n        method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\",\\\\n            \\\\\\\"        headers: {\\\\\\\\n          \\\\\\\\\\\\\\\"Content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/js\",\n            \"on\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n        body: JSON.stringify(body),\\\\\\\\n      },\\\\\\\\n    );\\\\\\\\n\\\\\\\\n    const session = await response.json();\\\\\\\\n\\\\\\\\n    const result = stripe.redirectToCheckout({\\\\\\\\n      sessionId: session.id,\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    if (result.error) {\\\\\\\\n      console.log(result.error);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex min-h-screen w-full items-center justify-center bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"cart relative mb-20 flex min-h-[90vh] w-[\\\\\\\",\\\\n   \",\n            \"         \\\\\\\"60vw] flex-col gap-10 rounded-lg bg-zinc-600 py-10\\\\\\\\\\\\\\\">\\\\\\\\n          {items.map((products) => (\\\\\\\\n            <div\\\\\\\\n              key={products._id}\\\\\\\\n              className=\\\\\\\\\\\\\\\"prod relative min-h-[30%] w-full bg-zinc-500\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"backtxt  absolute font-[Montserrat] text-8xl uppercase tracking-tight text-zinc-600\\\\\\\\\\\\\\\">\\\\\\\\n                {products.product.company}\\\\\\\\n              </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"front relative fle\",\n            \"x h-full w-full items-center justify-between\\\\\\\\\\\\\\\">\\\\\\\\n\\\\\\\",\\\\n            \\\\\\\"                <div className=\\\\\\\\\\\\\\\"flex items-center\\\\\\\\\\\\\\\">\\\\\\\\n                  <img\\\\\\\\n                    src={`${products.product.productImg}`}\\\\\\\\n                    className=\\\\\\\\\\\\\\\"max-w-22 h-20 object-cover\\\\\\\\\\\\\\\"\\\\\\\\n                  />\\\\\\\\n                  <div>\\\\\\\\n                    <h1 className=\\\\\\\\\\\\\\\"font-[Poppins] text-3xl font-extrabold tracking-wider text-white\\\\\\\\\\\\\\\">\\\\\\\\n                      {products.product.name}\\\\\\\\n         \",\n            \"           </h1>\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"flex gap-2 font-[Poppins]\\\\\\\\\\\\\\\">\\\\\\\\n                      <h\\\\\\\",\\\\n            \\\\\\\"4 className=\\\\\\\\\\\\\\\"font-light line-through \\\\\\\\\\\\\\\">\\\\\\\\n                        ${products.product.price}\\\\\\\\n                      </h4>\\\\\\\\n                      <h4 className=\\\\\\\\\\\\\\\"font-bold\\\\\\\\\\\\\\\">\\\\\\\\n                        ${products.product.discountPrice}\\\\\\\\n                      </h4>\\\\\\\\n                    </div>\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n        \",\n            \"        <div className=\\\\\\\\\\\\\\\"btns flex items-center gap-8 pr-10 text-xl\\\\\\\\\\\\\\\">\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"transition-all ease-in-out hover:scale-125\\\\\\\\\\\\\\\">\\\\\\\\n                \\\\\\\",\\\\n            \\\\\\\"    <IoMdAddCircleOutline\\\\\\\\n                      onClick={() => handleIncreaseQuantity(products._id)}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                  <h1>{products.quantity}</h1>\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"transition-all ease-in-out hover:scale-125\\\\\\\\\\\\\\\">\\\\\\\\n        \",\n            \"            <IoRemoveCircleOutline\\\\\\\\n                      onClick={() => handleDecreaseQuantity(products._id)}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n              </div>\\\\\\\\n            </d\\\\\\\",\\\\n            \\\\\\\"iv>\\\\\\\\n          ))}\\\\\\\\n\\\\\\\\n          <div className=\\\\\\\\\\\\\\\" total absolute bottom-0 mt-10 flex h-20 w-full items-center justify-around border-t-2 font-[Montserrat] text-3xl font-bold uppercase \\\\\\\\\\\\\\\">\\\\\\\\n            <h1>Your cart total = ${Cart.totalPrice}/- <\",\n            \"/h1>\\\\\\\\n            <div>\\\\\\\\n              <button\\\\\\\\n                className=\\\\\\\\\\\\\\\"w-[110%] rounded-full bg-[#676eff]\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={redirectPayment}\\\\\\\\n              >\\\\\\\\n                Proceed to checkout\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n\\\\\\\",\\\\n            \\\\\\\"        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default CartPage;\\\\\\\\n\\\\\\\\n/*\\\\\\\\nUsing state management, implement the add and remove cart methods and manipulate the quantity from the\",\n            \" user state action payload\\\\\\\\n\\\\\\\\n*/\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/CategoryPage.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { useParams } from \\\\\\\\\\\\\\\"react-router\\\\\\\\\\\\\\\";\\\\\\\\nimport CatProductCard from \\\\\\\\\\\\\\\"../components/CatProductCard\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst CategoryPage = () => {\\\\\\\\n  const { category } = useParams();\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"relative h-screen w-full overflow-hidden bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"backTxt absolute to\",\n            \"p-[45%] z-0 -translate-x-7 -translate-y-1/2 select-none overflow-hidden font-[Montserrat] text-[18rem] font-extrabold uppercase tracking-wide text-[#72748e] opacity-1\\\\\\\",\\\\n            \\\\\\\"5\\\\\\\\\\\\\\\">\\\\\\\\n          <h1>{category}</h1>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"card relative z-10 flex h-full w-full justify-center items-center  flex-shrink text-white\\\\\\\\\\\\\\\">\\\\\\\\n          <CatProductCard category={category} />\\\\\\\\n          <CatProductCard category={category} />\\\\\\\\n          <CatProductCard categ\",\n            \"ory={category} />\\\\\\\\n          <CatProductCard category={category} />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default CategoryPage;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/FailedPage.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport PaymentFailCard from \\\\\\\\\\\\\\\"../components/PaymentFailCard\\\\\\\\\\\\\\\";\\\\\\\\nfunction FailedPage() {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"-mt-[15vh] flex h-screen w-full  items-center justify-center gap-10 bg-[#23232f]\\\\\\\\\\\\\\\"\",\n            \">\\\\\\\\n        <PaymentFailCard />\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default FailedPage;\\\\\\\\n\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/Home.jsx\\\\\\\": [\\\\n            \\\\\\\"import React, { useEffect, useState } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport HeroProduct from \\\\\\\\\\\\\\\"../components/HeroProduct\\\\\\\\\\\\\\\";\\\\\\\\nimport CategoriesCard from \\\\\\\\\\\\\\\"../components/CategoriesCard\\\\\\\\\\\\\\\";\\\\\\\\nimport Featured from \\\\\\\\\\\\\\\"../components/Featured\\\\\\\\\\\\\\\";\\\\\\\\nimport axios from \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\";\\\\\\\\nimport { ToastContainer } from \\\\\\\\\\\\\\\"react-to\",\n            \"astify\\\\\\\\\\\\\\\";\\\\\\\\nimport \\\\\\\\\\\\\\\"react-toastify/dist/ReactToastify.css\\\\\\\\\\\\\\\";\\\\\\\\nimport PageLoader from \\\\\\\\\\\\\\\"./PageLoader\\\\\\\\\\\\\\\";\\\\\\\\nimport MobileLoader from \\\\\\\\\\\\\\\"../components/MobileLoader\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst Home = () => {\\\\\\\\n    const [cardData, setCardData] = useState([{}]\\\\\\\",\\\\n            \\\\\\\");\\\\\\\\n    const [featuredCards, setFeaturedCards] = useState([{}]);\\\\\\\\n\\\\\\\\n    useEffect(() => {\\\\\\\\n        async function fetchData() {\\\\\\\\n            try {\\\\\\\\n                const [heroResponse, featuredResponse] = await Promise.\",\n            \"all([\\\\\\\\n                    axios.get(`${import.meta.env.VITE_BACKEND_DOMAIN}/HeroProducts`),\\\\\\\\n                    axios.get(`${import.meta.env.VITE_BACKEND_DOMAIN}/Products`),\\\\\\\\n                ]);\\\\\\\\n                setCardData(heroResponse.data);\\\\\\\\n                setFeaturedCards(featuredRes\\\\\\\",\\\\n            \\\\\\\"ponse.data);\\\\\\\\n            } catch (error) {\\\\\\\\n                console.log(\\\\\\\\\\\\\\\"Error occurred while fetching data:\\\\\\\\\\\\\\\", error);\\\\\\\\n            }\\\\\\\\n        }\\\\\\\\n        fetchData();\\\\\\\\n    \",\n            \"}, []);\\\\\\\\n\\\\\\\\n    return (\\\\\\\\n        <>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"sm:block lg:hidden\\\\\\\\\\\\\\\">\\\\\\\\n                <MobileLoader />\\\\\\\\n            </div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"overflow-x-hidden hidden sm:block\\\\\\\\\\\\\\\">\\\\\\\\n                <PageLoader text={'GEARUP'} />\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"lg:block\\\\\\\\\\\\\\\">\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"h-screen \\\\\\\",\\\\n            \\\\\\\"w-full bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n                        <HeroProduct cards={cardData} />\\\\\\\\n                    <\",\n            \"/div>\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"min-h-screen w-full overflow-hidden bg-[#23232f] pb-40\\\\\\\\\\\\\\\">\\\\\\\\n                        <h1 className=\\\\\\\\\\\\\\\"w-full py-10 text-center font-[Poppins] text-5xl text-white\\\\\\\\\\\\\\\">\\\\\\\\n                            Categories\\\\\\\\n                        </h1>\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"flex h-screen w-[100vw] flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n                            <CategoriesCard\\\\\\\\n           \\\\\\\",\\\\n            \\\\\\\"                     image=\\\\\\\\\\\\\\\"/Keyboard.png\\\\\\\\\\\\\\\"\\\\\",\n            \"\\\\n                                category=\\\\\\\\\\\\\\\"Keyboard\\\\\\\\\\\\\\\"\\\\\\\\n                                price=\\\\\\\\\\\\\\\"49\\\\\\\\\\\\\\\"\\\\\\\\n                            />\\\\\\\\n                            <CategoriesCard image=\\\\\\\\\\\\\\\"/Mouse.png\\\\\\\\\\\\\\\" category=\\\\\\\\\\\\\\\"Mouse\\\\\\\\\\\\\\\" price=\\\\\\\\\\\\\\\"29\\\\\\\\\\\\\\\" />\\\\\\\\n                            <CategoriesCard\\\\\\\\n                                image=\\\\\\\\\\\\\\\"/Headset.png\\\\\\\\\\\\\\\"\\\\\\\\n                                category=\\\\\\\\\\\\\\\"Headset\\\\\\\\\\\\\\\"\\\\\\\\n                                price=\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\"\\\\\\\\n                       \",\n            \"     />\\\\\\\\n               \\\\\\\",\\\\n            \\\\\\\"             <CategoriesCard\\\\\\\\n                                image=\\\\\\\\\\\\\\\"/Headset.png\\\\\\\\\\\\\\\"\\\\\\\\n                                category=\\\\\\\\\\\\\\\"Headset\\\\\\\\\\\\\\\"\\\\\\\\n                                price=\\\\\\\\\\\\\\\"22\\\\\\\\\\\\\\\"\\\\\\\\n                            />\\\\\\\\n                        </div>\\\\\\\\n                    </div>\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"Page3 min-h-screen w-full overflow-hidden bg-[#23232f] py-10\\\\\\\\\\\\\\\">\\\\\\\\n                        <div className=\\\\\\\\\\\\\\\"heading p\",\n            \"x-14 font-[Poppins] text-5xl font-bold text-white\\\\\\\\\\\\\\\">\\\\\\\\n                            <h1 cla\\\\\\\",\\\\n            \\\\\\\"ssName=\\\\\\\\\\\\\\\"-mb-14\\\\\\\\\\\\\\\">Featured</h1>\\\\\\\\n                        </div>\\\\\\\\n                        <Featured featuredCards={featuredCards} />\\\\\\\\n                        <ToastContainer />\\\\\\\\n                    </div>\\\\\\\\n                </div>\\\\\\\\n            </div>\\\\\\\\n        </>\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default Home;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/LoginPage.jsx\\\\\\\": [\\\\n          \",\n            \"  \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { useState } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { Link } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { useNavigate } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { useDispatch } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport { loginUser } from \\\\\\\\\\\\\\\"../features/auth/authActions\\\\\\\\\\\\\\\";\\\\\\\\n// import { GoogleLoginSuccess } from \\\\\\\\\\\\\\\"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport { toast } from \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\";\\\\\\\\nimport { useGSAP } from \\\\\\\\\\\\\\\"@gsap/react\\\\\\\\\\\\\\\";\\\\\\\\nimport gsap from \\\\\\\\\\\\\\\"gsap\\\\\",\n            \"\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nexport default function LoginPage() {\\\\\\\\n  useGSAP(() => {\\\\\\\\n    gsap.from(\\\\\\\\\\\\\\\".Form\\\\\\\",\\\\n            \\\\\\\"Card\\\\\\\\\\\\\\\", {\\\\\\\\n      opacity: 0,\\\\\\\\n      y: 100,\\\\\\\\n      delay: 0.8,\\\\\\\\n      duration: 1,\\\\\\\\n    });\\\\\\\\n    gsap.from(\\\\\\\\\\\\\\\".backText\\\\\\\\\\\\\\\", {\\\\\\\\n      y: -100,\\\\\\\\n      opacity: 0,\\\\\\\\n      duration: 0.5,\\\\\\\\n    });\\\\\\\\n  });\\\\\\\\n  const navigateTo = useNavigate();\\\\\\\\n  const dispatch = useDispatch();\\\\\\\\n\\\\\\\\n  const [username, setusername] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  const [password, setpassword] = useSt\",\n            \"ate(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n  const handleLogin = async (e) => {\\\\\\\\n    e.preventDefault();\\\\\\\\n    try {\\\\\\\\n      dispatch(loginUser({ username, password }));\\\\\\\\n      navigateTo(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\");\\\\\\\\n    \\\\\\\",\\\\n            \\\\\\\"} catch (error) {\\\\\\\\n      toast.error(\\\\\\\\\\\\\\\"Login failed, please try again\\\\\\\\\\\\\\\");\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"relative  h-screen w-full bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\" absolute left-1/2 top-1/2 z-0 h-auto w-full -translate-x-1/2 -translate-y-1/2  \",\n            \"\\\\\\\\\\\\\\\">\\\\\\\\n          <h1 className=\\\\\\\\\\\\\\\"backText text-center font-[Montserrat] text-[30vh] uppercase tracking-widest text-[#72748e]\\\\\\\\\\\\\\\">\\\\\\\\n            Login\\\\\\\\n          </h1>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"relative z-10 flex h-screen w-full ite\\\\\\\",\\\\n            \\\\\\\"ms-center justify-center\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"FormCard flex  w-[35vw] items-center  rounded-2xl border-2 p-10 backdrop-blur-lg\\\\\\\\\\\\\\\">\\\\\\\\n            <form\\\\\\\\n              onSubmit={handleLogin}\\\\\\\\n              clas\",\n            \"sName=\\\\\\\\\\\\\\\"flex h-full w-full flex-col items-center justify-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <h1 className=\\\\\\\\\\\\\\\" font-[Poppins] text-4xl font-extrabold text-white\\\\\\\\\\\\\\\">\\\\\\\\n                Login\\\\\\\\n              </h1>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full flex-col gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <label\\\\\\\\n \\\\\\\",\\\\n            \\\\\\\"                 htmlFor=\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"font-[Poppins] text-xl text-white\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  User\",\n            \"name\\\\\\\\n                </label>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n                  name=\\\\\\\\\\\\\\\"Username\\\\\\\\\\\\\\\"\\\\\\\\n                  value={username}\\\\\\\\n                  onChange={(e) => setusername(e.target.value)}\\\\\\\\n                  className=\\\\\\\\\\\\\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676ef\\\\\\\",\\\\n            \\\\\\\"f]\\\\\\\\\\\\\\\"\\\\\\\\n                  placeholder=\\\\\\\\\\\\\\\"Enter your username\\\\\\\\\\\\\\\"\\\\\\\\n                />\\\\\\\\n  \",\n            \"            </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full flex-col gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <label\\\\\\\\n                  htmlFor=\\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"font-[Poppins] text-xl text-white\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Password\\\\\\\\n                </label>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\"\\\\\\\\n                  name=\\\\\\\\\\\\\\\"Password\\\\\\\\\\\\\\\"\\\\\\\\n                  value={password}\\\\\\\\n                  onChang\\\\\\\",\\\\n            \\\\\\\"e={(\",\n            \"e) => setpassword(e.target.value)}\\\\\\\\n                  placeholder=\\\\\\\\\\\\\\\"Enter your password\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\\\\\\\\\\\\\"\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full items-center justify-between\\\\\\\\\\\\\\\">\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"flex gap-2 text-xl text-[#72748e]\\\\\\\\\\\\\\\">\\\\\\\\n                  <h3>New Here??</h3>\\\\\\\\n      \",\n            \"            <Link\\\\\\\\n                  \\\\\\\",\\\\n            \\\\\\\"  to=\\\\\\\\\\\\\\\"/Register\\\\\\\\\\\\\\\"\\\\\\\\n                    className=\\\\\\\\\\\\\\\"text-[#676eff] hover:text-[#313690]\\\\\\\\\\\\\\\"\\\\\\\\n                  >\\\\\\\\n                    Create Account\\\\\\\\n                  </Link>\\\\\\\\n                </div>\\\\\\\\n                <button className=\\\\\\\\\\\\\\\"rounded-lg px-3 py-1 bg-[#676eff] font-[Poppins] text-2xl font-bold\\\\\\\\\\\\\\\">\\\\\\\\n                  Login\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n            </form>\\\\\\\\n          </div>\\\\\\\\\",\n            \"n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\n/*\\\\\\\\n\\\\\\\\n*/\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/PageLoader.jsx\\\\\\\": [\\\\n            \\\\\\\"import React, { useEffect } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport gsap from \\\\\\\\\\\\\\\"gsap\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst PageLoader = ({ text }) => {\\\\\\\\n    useEffect(() => {\\\\\\\\n        gsap.fromTo(\\\\\\\\n            \\\\\\\\\\\\\\\".even\\\\\\\\\\\\\\\",\\\\\\\\n            { y: 1000 },\\\\\\\\n            { y: 0, duration: 1, stagger: 0.2, ease: \\\\\\\\\\\\\\\"power1\\\\\\\\\\\\\\\" }\\\\\\\\n        );\\\\\\\\n        gsap.fromTo(\\\\\\\\n            \\\\\\\\\\\\\\\"\",\n            \".odd\\\\\\\\\\\\\\\",\\\\\\\\n            { y: -1000 },\\\\\\\\n            { y: 0, duration: 1, stagger: 0.2, ease: \\\\\\\\\\\\\\\"power1\\\\\\\\\\\\\\\" }\\\\\\\\n        );\\\\\\\\n\\\\\\\\n        gsap.to(\\\\\\\\\\\\\\\".wrapper\\\\\\\\\\\\\\\", {\\\\\\\\n            y: \\\\\\\\\\\\\\\"-100%\\\\\\\\\\\\\\\",\\\\\\\\n            ease: \\\\\\\\\\\\\\\"power1.inOut\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\",\\\\n            \\\\\\\"          delay: 1,\\\\\\\\n        });\\\\\\\\n    }, []);\\\\\\\\n\\\\\\\\n    const renderText = () => {\\\\\\\\n        return text.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").map((char, index) => (\\\\\\\\n            <div\\\\\\\\n                key={index}\\\\\\\\n                className={`${index % 2 ===\",\n            \" 0 ? \\\\\\\\\\\\\\\"even\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"odd\\\\\\\\\\\\\\\"} -space-y-8 leading-none`}\\\\\\\\n            >\\\\\\\\n                {Array(5)\\\\\\\\n                    .fill(char)\\\\\\\\n                    .map((c, i) => (\\\\\\\\n                        <h1 key={i}>{c}</h1>\\\\\\\\n                    ))}\\\\\\\\n            </div>\\\\\\\\n        ));\\\\\\\\n    };\\\\\\\\n\\\\\\\\n    return (\\\\\\\\n      \\\\\\\",\\\\n            \\\\\\\"  <div className=\\\\\\\\\\\\\\\"wrapper z-50 absolute left-0 top-0 flex h-screen w-full items-center justify-center bg-zinc-900 text-[10rem] font-bold text-white\\\\\\\\\\\\\\\">\\\\\\\\n    \",\n            \"        <div className=\\\\\\\\\\\\\\\"flex h-[8.1rem] w-full items-center justify-center overflow-hidden text-center\\\\\\\\\\\\\\\">\\\\\\\\n                {renderText()}\\\\\\\\n            </div>\\\\\\\\n        </div>\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nexport default PageLoader;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/ProductPage.jsx\\\\\\\": [\\\\n            \\\\\\\"import React, { useEffect, useState } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { useParams } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport axios from \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\";\\\\\\\\nimport ProductCard from \\\\\\\\\\\\\\\"../component\",\n            \"s/ProductCard\\\\\\\\\\\\\\\";\\\\\\\\nimport ProductDetails from \\\\\\\\\\\\\\\"../components/ProductDetails\\\\\\\\\\\\\\\";\\\\\\\\nimport { ToastContainer } from \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction ProductPage() {\\\\\\\\n  const [product, setproduct] = useState([{}]);\\\\\\\\n  const { id } = useParams();\\\\\\\\n  useEffect(() => {\\\\\\\\n    async function fetchProduct() {\\\\\\\\n      const response = await axios.get(`${import.meta.\\\\\\\",\\\\n            \\\\\\\"env.VITE_BACKEND_DOMAIN}/product/${id}`);\\\\\\\\n      setproduct(response.data);\\\\\\\\n    }\\\\\\\\n    fetchProduct();\\\\\\\\n \",\n            \" }, []);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"w-full overflow-hidden bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n        <ProductCard productData={product} />\\\\\\\\n      </div>\\\\\\\\n      <div\\\\\\\\n        id=\\\\\\\\\\\\\\\"Details\\\\\\\\\\\\\\\"\\\\\\\\n        className=\\\\\\\\\\\\\\\"dets h-screen w-full overflow-hidden bg-[#23232f]\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <ProductDetails details={product} />\\\\\\\\n        <ToastContainer />\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default ProductPage;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/RegisterPage.\",\n            \"jsx\\\\\\\": [\\\\n            \\\\\\\"import axios from \\\\\\\\\\\\\\\"axios\\\\\\\\\\\\\\\";\\\\\\\\nimport React, { useState } from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport { useNavigate } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { Link } from \\\\\\\\\\\\\\\"react-router-dom\\\\\\\\\\\\\\\";\\\\\\\\nimport { toast } from \\\\\\\\\\\\\\\"react-toastify\\\\\\\\\\\\\\\";\\\\\\\\nimport { useDispatch } from \\\\\\\\\\\\\\\"react-redux\\\\\\\\\\\\\\\";\\\\\\\\nimport { loginSuccess } from \\\\\\\\\\\\\\\"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\nimport gsap from \\\\\\\\\\\\\\\"gsap\\\\\\\\\\\\\\\";\\\\\\\\nimport { useGSAP } from \\\\\\\\\\\\\\\"@gsap/react\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction RegisterPage() {\\\\\\\\n  useGSAP(\",\n            \"() => {\\\\\\\\n    gsap.from(\\\\\\\\\\\\\\\".FormCard\\\\\\\\\\\\\\\", {\\\\\\\\n      opacity: 0,\\\\\\\\n      y: 100,\\\\\\\\n      delay: 0.8,\\\\\\\\n      duratio\\\\\\\",\\\\n            \\\\\\\"n: 1,\\\\\\\\n    });\\\\\\\\n    gsap.from(\\\\\\\\\\\\\\\".backText\\\\\\\\\\\\\\\", {\\\\\\\\n      y: -100,\\\\\\\\n      opacity: 0,\\\\\\\\n      duration: 0.5,\\\\\\\\n    });\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  const navigateTo = useNavigate();\\\\\\\\n  const dispatch = useDispatch();\\\\\\\\n\\\\\\\\n  const [username, setusername] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  const [name, setname] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  const [email, setemail] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\",\n            \"\\\\n  const [password, setpassword] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n  const register = async (e) => {\\\\\\\\n    e.preventDefault();\\\\\\\\n\\\\\\\\n    try {\\\\\\\\n      const response = await axios.post(\\\\\\\\n        `${import.meta.env.V\\\\\\\",\\\\n            \\\\\\\"ITE_BACKEND_DOMAIN}/register`,\\\\\\\\n        {\\\\\\\\n          username,\\\\\\\\n          name,\\\\\\\\n          email,\\\\\\\\n          password,\\\\\\\\n        },\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      if (response.status === 200) {\\\\\\\\n        dispatch(loginSuccess(response.data));\\\\\\\\n        navigateTo(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\");\\\\\",\n            \"\\\\n      } else if (response.status === 201) {\\\\\\\\n        navigateTo(\\\\\\\\\\\\\\\"/Login\\\\\\\\\\\\\\\");\\\\\\\\n        toast.info(\\\\\\\\\\\\\\\"User Already exists, please login\\\\\\\\\\\\\\\");\\\\\\\\n      } else {\\\\\\\\n        toast.error(\\\\\\\\\\\\\\\"Something went wrong, please try again\\\\\\\\\\\\\\\");\\\\\\\\n      }\\\\\\\\n    } catch (error) {\\\\\\\\n      console.err\\\\\\\",\\\\n            \\\\\\\"or(\\\\\\\\\\\\\\\"Error:\\\\\\\\\\\\\\\", error);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"relative  h-screen w-full bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"absolute left-1/2 top-1/2 z\",\n            \"-0 w-full -translate-x-1/2 -translate-y-1/2 \\\\\\\\\\\\\\\">\\\\\\\\n          <h1 className=\\\\\\\\\\\\\\\"backText text-center font-[Montserrat] text-[30vh] uppercase tracking-wide text-[#72748e]\\\\\\\\\\\\\\\">\\\\\\\\n            Register\\\\\\\\n          </h1>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"relative z-10 flex h-screen w-full items-center justify-center\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"FormC\\\\\\\",\\\\n            \\\\\\\"ard flex  w-[35vw] items-center rounded-2xl border-2 p-10 backdrop-blur-lg \\\\\\\\\\\\\\\">\\\\\\\\n            <form\\\\\\\\n            \",\n            \"  onSubmit={register}\\\\\\\\n              className=\\\\\\\\\\\\\\\"flex h-full w-full flex-col items-center justify-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <h1 className=\\\\\\\\\\\\\\\"font-[Poppins] text-4xl font-extrabold text-white\\\\\\\\\\\\\\\">\\\\\\\\n                Create an Account\\\\\\\\n              </h1>\\\\\\\\n\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full flex-col gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <label\\\\\\\\n                  htmlFor=\\\\\\\\\\\\\\\"username\\\\\\\\\\\\\\\"\\\\\\\\n             \\\\\\\",\\\\n            \\\\\\\"     className=\\\\\\\\\\\\\\\"font-[Poppins] text-xl tex\",\n            \"t-white\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Username\\\\\\\\n                </label>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n                  name=\\\\\\\\\\\\\\\"Username\\\\\\\\\\\\\\\"\\\\\\\\n                  value={username}\\\\\\\\n                  onChange={(e) => setusername(e.target.value)}\\\\\\\\n                  className=\\\\\\\\\\\\\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\\\\\\\\\\\\\"\\\\\\\\n                  placeholder=\\\\\\\\\\\\\\\"Enter your u\",\n            \"se\\\\\\\",\\\\n            \\\\\\\"rname\\\\\\\\\\\\\\\"\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              {/* Name */}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full flex-col gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <label\\\\\\\\n                  htmlFor=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"font-[Poppins] text-xl text-white\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Name\\\\\\\\n                </label>\\\\\\\\n\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n                  name=\\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\"\\\\\\\\n             \",\n            \"     value={name}\\\\\\\\n                  onChange={(e) => setname(e.target.value)}\\\\\\\\n      \\\\\\\",\\\\n            \\\\\\\"            placeholder=\\\\\\\\\\\\\\\"Enter your name\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"block w-full rounded-lg border bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\\\\\\\\\\\\\"\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              {/* email */}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full flex-col gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <label\\\\\\\\n                  htm\",\n            \"lFor=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"font-[Poppins] text-xl text-white\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Email\\\\\\\\n                </lab\\\\\\\",\\\\n            \\\\\\\"el>\\\\\\\\n\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n                  name=\\\\\\\\\\\\\\\"Email\\\\\\\\\\\\\\\"\\\\\\\\n                  value={email}\\\\\\\\n                  onChange={(e) => setemail(e.target.value)}\\\\\\\\n                  placeholder=\\\\\\\\\\\\\\\"Enter your email\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"block w-full rounded-lg b\",\n            \"order bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\\\\\\\\\\\\\"\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              {/* password */}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"flex w-full flex-col\\\\\\\",\\\\n            \\\\\\\" gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <label\\\\\\\\n                  htmlFor=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"font-[Poppins] text-xl text-white\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Password\\\\\\\\n                </label>\\\\\\\\n\\\\\\\\n                <inpu\",\n            \"t\\\\\\\\n                  type=\\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\"\\\\\\\\n                  name=\\\\\\\\\\\\\\\"Password\\\\\\\\\\\\\\\"\\\\\\\\n                  value={password}\\\\\\\\n                  onChange={(e) => setpassword(e.target.value)}\\\\\\\\n                  placeholder=\\\\\\\\\\\\\\\"Enter your password\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"block w-full rounded-lg borde\\\\\\\",\\\\n            \\\\\\\"r bg-gray-500 p-2.5 text-sm text-white  placeholder:text-gray-300 focus:border-[#676eff]\\\\\\\\\\\\\\\"\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n\\\\\\\\n              <div classNam\",\n            \"e=\\\\\\\\\\\\\\\"flex items-center justify-between gap-2 w-full\\\\\\\\\\\\\\\">\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"flex gap-2 text-xl text-[#72748e]\\\\\\\\\\\\\\\">\\\\\\\\n                  <h3>Have an account already??</h3>\\\\\\\\n                  <Link\\\\\\\\n                    to=\\\\\\\\\\\\\\\"/Login\\\\\\\\\\\\\\\"\\\\\\\\n                    className=\\\\\\\\\\\\\\\"text-[#676eff] hover:text-[#313690]\\\\\\\\\\\\\\\"\\\\\\\\n                  >\\\\\\\\n                    Log I\\\\\\\",\\\\n            \\\\\\\"n\\\\\\\\n                  </Link>\\\\\\\\n                </div>\\\\\\\\n                <button className=\\\\\\\\\\\\\\\"self-e\",\n            \"nd rounded-lg bg-[#676eff] px-3 py-1 font-[Poppins]  text-2xl\\\\\\\\\\\\\\\">\\\\\\\\n                  Register\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n            </form>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default RegisterPage;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/SuccessPage.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from \\\\\\\\\\\\\\\"react\\\\\\\\\\\\\\\";\\\\\\\\nimport PaymentSuccessCard from \\\\\\\\\\\\\\\"../components/PaymentSuccessCard\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction SuccessPage() {\\\\\\\\n  \",\n            \"return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"-mt-[15vh] flex h-screen w-full  items-center justify-center gap-10 bg-[#23232f]\\\\\\\\\\\\\\\">\\\\\\\\n        <PaymentSuccessCard />\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default SuccessPage;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/pages/failure.jsx\\\\\\\": [\\\\n            \\\\\\\"import React from 'react'\\\\\\\\n\\\\\\\\nfunction failure() {\\\\\\\\n  return (\\\\\\\\n    <div>It seems you're not logged in!!</div>\\\\\\\\n  )\\\\\\\\n}\\\\\\\\n\\\\\\\\nexport default failure\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/sr\",\n            \"c/pages/index.js\\\\\\\": [\\\\n            \\\\\\\"export { default as ProductPage } from \\\\\\\\\\\\\\\"./ProductPage\\\\\\\\\\\\\\\";\\\\\\\\nexport { default as LoginPage } from \\\\\\\\\\\\\\\"./LoginPage\\\\\\\\\\\\\\\";\\\\\\\\nexport { default as RegisterPage } from \\\\\\\\\\\\\\\"./RegisterPage\\\\\\\\\\\\\\\";\\\\\\\\nexport { default as Home } from \\\\\\\\\\\\\\\"./Home\\\\\\\\\\\\\\\";\\\\\\\\nexport { default as CategoryPage } from \\\\\\\\\\\\\\\"./CategoryPage\\\\\\\\\\\\\\\";\\\\\\\\nexport { default as CartPage } from \\\\\\\\\\\\\\\"./CartPage\\\\\\\\\\\\\\\";\\\\\\\\nexport { default as FailedPage } from \\\\\\\\\\\\\\\"./FailedPage\\\\\\\\\\\\\\\";\\\\\\\\nexport { default as SuccessPage } fro\",\n            \"m \\\\\\\\\\\\\\\"./SuccessPage\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/src/store/Store.js\\\\\\\": [\\\\n            \\\\\\\"import { configureStore } from \\\\\\\\\\\\\\\"@reduxjs/toolkit\\\\\\\\\\\\\\\";\\\\\\\\nimport authReducer from \\\\\\\\\\\\\\\"../features/auth/authSlice\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst store = configureStore({\\\\\\\\n  reducer: {\\\\\\\\n    auth: authReducer\\\\\\\\n  },\\\\\\\\n});\\\\\\\\n\\\\\\\\nexport default store;\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/tailwind.config.js\\\\\\\": [\\\\n            \\\\\\\"// /** @type {import('tailwindcss').Config} */\\\\\\\\nconst flowbite = require(\\\\\\\\\\\\\\\"flowbite-re\",\n            \"act/tailwind\\\\\\\\\\\\\\\");\\\\\\\\nexport default {\\\\\\\\n  content: [\\\\\\\\\\\\\\\"./index.html\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"./src/**/*.{js,jsx}\\\\\\\\\\\\\\\", flowbite.content()],\\\\\\\\n  theme: {\\\\\\\\n    extend: {},\\\\\\\\n  },\\\\\\\\n  plugins: [flowbite.plugin()],\\\\\\\\n};\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/vercel.json\\\\\\\": [\\\\n            \\\\\\\"{\\\\\\\\n  \\\\\\\\\\\\\\\"rewrites\\\\\\\\\\\\\\\": [\\\\\\\\n    { \\\\\\\\\\\\\\\"source\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/(.*)\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"destination\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\" }\\\\\\\\n  ]\\\\\\\\n}\\\\\\\\n\\\\\\\"\\\\n        ],\\\\n        \\\\\\\"my-store/vite.config.js\\\\\\\": [\\\\n            \\\\\\\"import { defineConfig } from 'vite'\\\\\\\\nimport react\",\n            \" from '@vitejs/plugin-react'\\\\\\\\n\\\\\\\\n// https://vitejs.dev/config/\\\\\\\\nexport default defineConfig({\\\\\\\\n  plugins: [react()],\\\\\\\\n})\\\\\\\\n\\\\\\\"\\\\n        ]\\\\n    },\\\\n    \\\\\\\"message\\\\\\\": \\\\\\\"Success\\\\\\\"\\\\n}\\\"),\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tRole: \\\"model\\\",\\n\\t\\t\\tParts: []genai.Part{\\n\\t\\t\\t\\tgenai.Text(\\\"### Documentation:\\\\n\\\\n- **Route**: POST /register\\\\n- **Response**:\\\\n```json\\\\n{\\\\n    \\\\\\\"user\\\\\\\": {\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"username\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"email\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"password\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"pf\",\n            \"p\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"googleID\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"googleName\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n          \\\\\\\"address\\\\\\\": {\\\\n            \\\\\\\"street\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n             \\\\\\\"city\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n              \\\\\\\"state\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n             \\\\\\\"pinCode\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"country\\\\\\\": \\\\\\\"string\\\\\\\"\\\\n        },\\\\n        \\\\\\\"role\\\\\\\": \\\\\\\"customer\\\\\\\",\\\\n        \\\\\\\"cart\\\\\\\": {\\\\n          \\\\\\\"items\\\\\\\": [],\\\\n            \\\\\\\"totalPrice\\\\\\\": 0\\\\n            },\\\\n            \\\\\\\"createdAt\\\\\\\": \\\\\\\"date\\\\\\\"\\\\n    }\\\\n}\\\\n```\\\\nStatus\",\n            \" Code: 200\\\\n```json\\\\n{\\\\n \\\\\\\"ExistingUser\\\\\\\":{\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"username\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"email\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"password\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"pfp\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"googleID\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"googleName\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n          \\\\\\\"address\\\\\\\": {\\\\n            \\\\\\\"street\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n             \\\\\\\"city\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n              \\\\\\\"state\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n             \\\\\\\"pinCode\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"country\\\\\\\": \\\\\\\"string\\\\\\\"\\\\n       \",\n            \" },\\\\n        \\\\\\\"role\\\\\\\": \\\\\\\"customer\\\\\\\",\\\\n        \\\\\\\"cart\\\\\\\": {\\\\n          \\\\\\\"items\\\\\\\": [],\\\\n            \\\\\\\"totalPrice\\\\\\\": 0\\\\n            },\\\\n             \\\\\\\"createdAt\\\\\\\": \\\\\\\"date\\\\\\\"\\\\n    }\\\\n}\\\\n```\\\\nStatus Code: 201\\\\n- **Summary**: Registers a new user, if the user doesn't already exists returns the user details, if the user exists it sends a 201 status code.\\\\n\\\\n- **Route**: POST /login\\\\n- **Response**:\\\\n```json\\\\n{\\\\n    \\\\\\\"user\\\\\\\": {\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"username\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"e\",\n            \"mail\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"password\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n         \\\\\\\"pfp\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"googleID\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"googleName\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n          \\\\\\\"address\\\\\\\": {\\\\n            \\\\\\\"street\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n             \\\\\\\"city\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n              \\\\\\\"state\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n             \\\\\\\"pinCode\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n            \\\\\\\"country\\\\\\\": \\\\\\\"string\\\\\\\"\\\\n        },\\\\n        \\\\\\\"role\\\\\\\": \\\\\\\"customer\\\\\\\",\\\\n        \\\\\\\"cart\\\\\\\": {\\\\n           \\\\\\\"items\\\\\\\": [{\\\\n               \\\\\\\"product\\\\\\\":{\\\\n      \",\n            \"             \\\\\\\"_id\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"name\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"price\\\\\\\": 0,\\\\n                   \\\\\\\"discountPrice\\\\\\\": 0,\\\\n                   \\\\\\\"productImg\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"company\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"productDetails\\\\\\\": []\\\\n               },\\\\n               \\\\\\\"quantity\\\\\\\":0\\\\n           }],\\\\n            \\\\\\\"totalPrice\\\\\\\": 0\\\\n        },\\\\n         \\\\\\\"createdAt\\\\\\\": \\\\\\\"date\\\\\\\"\\\\n    }\\\\n}\\\\n```\\\\nStatus Code: 200\\\\n- **Summary**: Logs in an existing use\",\n            \"r and returns the user details with cart details populated.\\\\n\\\\n-   **Route**: GET /HeroProducts\\\\n-   **Response**:\\\\n```json\\\\n[\\\\n    {\\\\n        \\\\\\\"_id\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"price\\\\\\\": 0,\\\\n        \\\\\\\"discountPrice\\\\\\\": 0,\\\\n        \\\\\\\"productImg\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"category\\\\\\\": \\\\\\\"string\\\\\\\"\\\\n    }\\\\n]\\\\n```\\\\nStatus Code: 200\\\\n-   **Summary**: Retrieves and returns a list of all hero products.\\\\n\\\\n-   **Route**: GET /Products\\\\n-   **Response**:\\\\n```json\\\\n[\\\\n    {\\\\n       \",\n            \" \\\\\\\"_id\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"price\\\\\\\": 0,\\\\n        \\\\\\\"discountPrice\\\\\\\": 0,\\\\n        \\\\\\\"productImg\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"company\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n         \\\\\\\"productDetails\\\\\\\": [],\\\\n        \\\\\\\"totalStock\\\\\\\":0,\\\\n         \\\\\\\"inStock\\\\\\\":true\\\\n    }\\\\n]\\\\n```\\\\nStatus Code: 200\\\\n-   **Summary**: Retrieves and returns a list of all products.\\\\n\\\\n- **Route**: GET /product/:id\\\\n-   **Response**:\\\\n```json\\\\n {\\\\n        \\\\\\\"_id\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"p\",\n            \"rice\\\\\\\": 0,\\\\n        \\\\\\\"discountPrice\\\\\\\": 0,\\\\n        \\\\\\\"productImg\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"company\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n         \\\\\\\"productDetails\\\\\\\": [],\\\\n        \\\\\\\"totalStock\\\\\\\":0,\\\\n         \\\\\\\"inStock\\\\\\\":true\\\\n    }\\\\n```\\\\nStatus Code: 200\\\\n-   **Summary**: Retrieves and returns a specific product by its ID.\\\\n\\\\n- **Route**: POST /add-to-cart\\\\n- **Response**:\\\\n```json\\\\n{\\\\n    \\\\\\\"message\\\\\\\": \\\\\\\"Added To cart\\\\\\\",\\\\n    \\\\\\\"data\\\\\\\": {\\\\n        \\\\\\\"items\\\\\\\": [\\\\n            {\\\\n             \\\\\\\"product\\\\\\\":{\\\\n                 \",\n            \"  \\\\\\\"_id\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"name\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"price\\\\\\\": 0,\\\\n                   \\\\\\\"discountPrice\\\\\\\": 0,\\\\n                   \\\\\\\"productImg\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"company\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n                   \\\\\\\"productDetails\\\\\\\": []\\\\n               },\\\\n              \\\\\\\"quantity\\\\\\\": 0\\\\n            }\\\\n        ],\\\\n        \\\\\\\"totalPrice\\\\\\\": 0\\\\n    }\\\\n}\\\\n```\\\\nStatus Code: 200\\\\n```json\\\\n{\\\\n    \\\\\\\"message\\\\\\\": \\\\\\\"Product or User not found\\\\\\\"\\\\n}\\\\n```\\\\nStatus Code: 404\\\\n``\",\n            \"`json\\\\n{\\\\n    \\\\\\\"message\\\\\\\": \\\\\\\"Internal server error\\\\\\\"\\\\n}\\\\n```\\\\nStatus Code: 500\\\\n-   **Summary**: Adds a product to the user's cart, or updates the quantity if the product is already there.\\\\n\\\\n- **Route**: GET /products/:category\\\\n- **Response**:\\\\n```json\\\\n[\\\\n    {\\\\n        \\\\\\\"_id\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"name\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"price\\\\\\\": 0,\\\\n        \\\\\\\"discountPrice\\\\\\\": 0,\\\\n        \\\\\\\"productImg\\\\\\\": \\\\\\\"string\\\\\\\",\\\\n        \\\\\\\"company\\\\\\\":\\\\\\\"string\\\\\\\",\\\\n         \\\\\\\"productDetails\\\\\\\": [],\\\\n        \\\\\\\"total\",\n            \"Stock\\\\\\\":0,\\\\n         \\\\\\\"inStock\\\\\\\":true\\\\n    }\\\\n]\\\\n```\\\\nStatus Code: 200\\\\n-   **Summary**: Retrieves and returns a list of products filtered by the provided category.\\\\n\\\\n-   **Route**: POST /create-checkout-session\\\\n-   **Response**:\\\\n```json\\\\n{\\\\n  \\\\\\\"id\\\\\\\": \\\\\\\"string\\\\\\\"\\\\n}\\\\n```\\\\nStatus Code: 200\\\\n-   **Summary**: Creates a new checkout session for stripe payment.\\\\n\\\"),\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}\\n\\tresp, err := session.SendMessage(ctx, genai.Text(input))\\n\\tif err != nil {\\n\\t\\treturn nil, fmt.Errorf(\\\"Error generating re\",\n            \"sponse: %v\\\", err)\\n\\t}\\n\\n\\tfor _, part := range resp.Candidates[0].Content.Parts {\\n\\t\\tgeneratedResponse := part\\n\\t\\treturn generatedResponse, nil\\n\\t}\\n\\n\\treturn nil, fmt.Errorf(\\\"No response generated\\\")\\n}\\n\"\n        ],\n        \"server/main.go\": [\n            \"package main\\n\\nimport (\\n\\t\\\"encoding/json\\\"\\n\\t\\\"io/fs\\\"\\n\\t\\\"log\\\"\\n\\t\\\"os\\\"\\n\\t\\\"path/filepath\\\"\\n\\n\\t\\\"docxGen/handlers\\\"\\n\\n\\t\\\"github.com/gofiber/fiber/v2\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/cors\\\"\\n\\t\\\"github.com/gofiber/fiber/v2/middleware/logger\\\"\\n\\t\\\"github.com/joho/godotenv\\\"\\n\\t\\\"gopkg.in/src-d/go-git.v4\\\"\\n)\\n\\nfunc main() {\\n\\n\\terr := godotenv.Load()\\n\\tif err != nil {\\n\\t\\tlog.Fatal(\\\"Error loading .env file\\\")\\n\\t}\\n\\n\\tvar GEMINI_API_KEY string = os.Getenv(\\\"GEMINI_API_KEY\\\")\\n\\n\\tapp := fiber.New()\\n\\n\\tapp.Use(logger.New())\\n\\n\\tvar CLIENT\",\n            \"_URL string = os.Getenv(\\\"DEV_URL\\\")\\n\\tapp.Use(cors.New(cors.Config{\\n\\t\\tAllowOrigins:     CLIENT_URL,\\n\\t\\tAllowMethods:     \\\"GET,POST,PUT,DELETE\\\",\\n\\t\\tAllowHeaders:     \\\"Origin, Content-Type, Accept\\\",\\n\\t\\tAllowCredentials: true,\\n\\t}))\\n\\n\\tapp.Get(\\\"/\\\", func(c *fiber.Ctx) error {\\n\\t\\tc.Redirect(\\\"/health\\\")\\n\\t\\treturn nil\\n\\t})\\n\\n\\tapp.Get(\\\"/health\\\", func(c *fiber.Ctx) error {\\n\\t\\treturn c.SendString(\\\"OK\\\")\\n\\t})\\n\\n\\tapp.Post(\\\"/process-repo\\\", func(c *fiber.Ctx) error {\\n\\n\\t\\ttype Request struct {\\n\\t\\t\\tRepoURL string `json:\\\"repo_url\",\n            \"\\\"`\\n\\t\\t}\\n\\n\\t\\treq := new(Request)\\n\\t\\tif err := c.BodyParser(req); err != nil {\\n\\t\\t\\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Invalid Request payload\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\t//Cloning and processing repo\\n\\t\\ttempDir := \\\"./tempRepo\\\"\\n\\t\\tdefer os.RemoveAll(tempDir) //Cleanup\\n\\n\\t\\tif err := cloneRepository(req.RepoURL, tempDir); err != nil {\\n\\t\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": err,\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\tfileData := processRepositoryFiles(tempDir)\\n\\n\\t\\tfileJso\",\n            \"nData, err := json.Marshal(fileData)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Printf(\\\"Couldnt convert to json: %v\\\", err)\\n\\t\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": err,\\n\\t\\t\\t})\\n\\n\\t\\t}\\n\\n\\t\\tinputString := string(fileJsonData)\\n\\n\\t\\tdocx, err := handlers.GenerateDocx(inputString, GEMINI_API_KEY)\\n\\t\\tif err != nil {\\n\\t\\t\\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\\n\\t\\t\\t\\t\\\"error\\\": \\\"Error generating docx\\\",\\n\\t\\t\\t})\\n\\t\\t}\\n\\n\\t\\tlog.Println(\\\"Response: %v\\\", docx)\\n\\n\\t\\treturn c.JSON(fibe\",\n            \"r.Map{\\n\\t\\t\\t\\\"message\\\": \\\"Success\\\",\\n\\t\\t\\t\\\"data\\\":    docx,\\n\\t\\t})\\n\\n\\t\\t// return c.JSON(fiber.Map{\\n\\t\\t//     \\\"message\\\" : \\\"Success\\\",\\n\\t\\t//     \\\"data\\\":     fileData,\\n\\t\\t// })\\n\\t})\\n\\n\\tlog.Println(\\\"Server started on http://localhost:6969\\\")\\n\\tif err := app.Listen(\\\":6969\\\"); err != nil {\\n\\t\\tlog.Fatal(\\\"Error starting server, %v\\\", err)\\n\\t}\\n}\\n\\nfunc cloneRepository(url, destination string) error {\\n\\t_, err := git.PlainClone(destination, false, &git.CloneOptions{\\n\\t\\tURL:      url,\\n\\t\\tProgress: os.Stdout,\\n\\t})\\n\\treturn err\\n}\\n\\nvar e\",\n            \"xcludedExtensions = map[string]bool{\\n\\t\\\".exe\\\":  true,\\n\\t\\\".png\\\":  true,\\n\\t\\\".jpg\\\":  true,\\n\\t\\\".jpeg\\\": true,\\n\\t\\\".gif\\\":  true,\\n\\t\\\".svg\\\":  true,\\n\\t\\\".xml\\\":  true,\\n\\t\\\".yaml\\\": true,\\n\\t\\\".html\\\": true,\\n}\\n\\nvar excludedFileNames = map[string]bool{\\n\\t\\\"LICENSE\\\":           true,\\n\\t\\\"Dockerfile\\\":        true,\\n\\t\\\".gitignore\\\":        true,\\n\\t\\\"package-lock.json\\\": true,\\n\\t\\\"index.html\\\":        true,\\n}\\n\\nfunc processRepositoryFiles(basePath string) map[string][]string {\\n\\tfileData := make(map[string][]string)\\n\\n\\tfilepath.WalkDir(basePat\",\n            \"h, func(path string, d fs.DirEntry, err error) error {\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Printf(\\\"Error reading file: %v\\\", err)\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\n\\t\\tif d.IsDir() {\\n\\t\\t\\tif d.Name() == \\\".git\\\" {\\n\\t\\t\\t\\tlog.Printf(\\\"Skipping directory: %v\\\", path)\\n\\t\\t\\t\\treturn filepath.SkipDir\\n\\t\\t\\t}\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\n\\t\\text := filepath.Ext(path)\\n\\t\\tif excludedExtensions[ext] {\\n\\t\\t\\tlog.Printf(\\\"Skipping file: %v with extension: %v\\\", path, ext)\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\n\\t\\tif excludedFileNames[d.Name()] {\\n\\t\\t\\tlog.Printf(\\\"Skipping file: %v with name\",\n            \": %v\\\", path, d.Name())\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\n\\t\\tcontent, err := os.ReadFile(path)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Printf(\\\"Failed to read file %v, error: %v\\\", path, err)\\n\\t\\t\\treturn nil\\n\\t\\t}\\n\\n\\t\\tcleanedContent := preprocessContent(string(content))\\n\\t\\tchunks := chunkContent(cleanedContent, 500)\\n\\n\\t\\trelativePath, _ := filepath.Rel(basePath, path)\\n\\t\\tfileData[relativePath] = chunks\\n\\n\\t\\treturn nil\\n\\t})\\n\\n\\treturn fileData\\n}\\n\\nfunc preprocessContent(content string) string {\\n\\treturn content\\n}\\n\\nfunc chunkContent(content strin\",\n            \"g, chunkSize int) []string {\\n\\tvar chunks []string\\n\\trunes := []rune(content)\\n\\n\\tfor i := 0; i < len(runes); i += chunkSize {\\n\\t\\tend := i + chunkSize\\n\\t\\tif end > len(runes) {\\n\\t\\t\\tend = len(runes)\\n\\t\\t}\\n\\t\\tchunks = append(chunks, string(runes[i:end]))\\n\\t}\\n\\n\\treturn chunks\\n\\n}\\n\"\n        ]\n    },\n    \"message\": \"Success\"\n}"),
			},
		},
		{
			Role: "model",
			Parts: []genai.Part{
				genai.Text("```json\n{\n  \"cq_rating\": \"B\",\n  \"maintainability_rating\": \"C\",\n  \"overall_rating\": \"B\",\n  \"readability_rating\": \"B\",\n  \"strengths\": \"The project demonstrates a good separation of concerns between the client and server, utilizing Next.js for the frontend and Go for the backend. The code is generally well-structured, with components and modules organized in a sensible manner. The use of Tailwind CSS and shadcn/ui contributes to a consistent and maintainable design system. Error handling and input validation are present, enhancing the robustness of the application.\",\n  \"summary\": \"The project is a full-stack web application that generates API documentation from a GitHub repository URL. It comprises a Next.js frontend for user interaction and a Go backend for repository processing and documentation generation. The project is reasonably well-structured and readable, but there are areas for improvement in maintainability and complexity.\",\n  \"weaknesses\": \"Code duplication exists in the client, particularly in component styling and logic. The backend lacks comprehensive error handling and logging, which can hinder debugging and maintenance. The project could benefit from more detailed documentation and unit tests to improve maintainability and testability. The complexity of the generative AI integration in Go could be simplified.\",\n  \"improvements\": \"Refactor duplicated code into reusable components and functions. Implement a consistent error handling and logging strategy in the backend. Add comprehensive documentation and unit tests for both the frontend and backend. Optimize the generative AI integration to reduce complexity and improve performance.\",\n  \"response\": \"I have reviewed the provided code and rated the project based on code quality, readability, maintainability, and complexity.\"\n}\n```"),
			},
		},
	}

	resp, err := session.SendMessage(ctx, genai.Text(input))
	if err != nil {
		return nil, fmt.Errorf("failed to generate response: %v", err)
	}

	// for _, part := range resp.Candidates[0].Content.Parts {
	// 	generatedResponse := part
	// 	return generatedResponse, nil
	// }

	part := resp.Candidates[0].Content.Parts[0]

	textPart, ok := part.(genai.Text)
	if !ok {
		return nil, fmt.Errorf("unexpected response type: %T", part)
	}

	var ratingResponse RatingResponse
	err = json.Unmarshal([]byte(textPart), &ratingResponse)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal response: %v", err)
	}

	// return nil, fmt.Errorf("No response generated")
	return &ratingResponse, nil

}
